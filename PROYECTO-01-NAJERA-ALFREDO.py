"""
Autor: Alfredo Nájera Nájera
Fecha: 30/08/2020
"""




"""
CARGAMOS LA BASE DE DATOS
"""


"""
USUARIOS Y ADMINISTRADORES

usuarios = [nombre_usuario, contraseña]
administradores = [nombre_administrador, contraseña]
"""

# Lista que contiene usuarios, administradores y sus respectivas contraseñas
usuarios = [["User_master", "camaranafox3"]]
administradores = [["Alfredo", "8mcQbttB_D"], ["Javier", "s0y_Emt3ch"]]


"""
This is the LifeStore-SalesList data:

lifestore-searches = [id_search, id product]
lifestore-sales = [id_sale, id_product, score (from 1 to 5), date, refund (1 for true or 0 to false)]
lifestore-products = [id_product, name, price, category, stock]
"""

# Definimos la lista de productos

lifestore_products = [
    [1, 'Procesador AMD Ryzen 3 3300X S-AM4, 3.80GHz, Quad-Core, 16MB L2 Cache', 3019, 'procesadores', 16],
    [2, 'Procesador AMD Ryzen 5 3600, S-AM4, 3.60GHz, 32MB L3 Cache, con Disipador Wraith Stealth', 4209, 'procesadores', 182],
    [3, 'Procesador AMD Ryzen 5 2600, S-AM4, 3.40GHz, Six-Core, 16MB L3 Cache, con Disipador Wraith Stealth', 3089, 'procesadores', 987],
    [4, 'Procesador AMD Ryzen 3 3200G con Gráficos Radeon Vega 8, S-AM4, 3.60GHz, Quad-Core, 4MB L3, con Disipador Wraith Spire', 2209, 'procesadores', 295],
    [5, 'Procesador Intel Core i3-9100F, S-1151, 3.60GHz, Quad-Core, 6MB Cache (9na. Generación - Coffee Lake)', 1779, 'procesadores', 130],
    [6, 'Procesador Intel Core i9-9900K, S-1151, 3.60GHz, 8-Core, 16MB Smart Cache (9na. Generación Coffee Lake)', 11809, 'procesadores', 54],
    [7, 'Procesador Intel Core i7-9700K, S-1151, 3.60GHz, 8-Core, 12MB Smart Cache (9na. Generación Coffee Lake)', 8559, 'procesadores', 114],
    [8, 'Procesador Intel Core i5-9600K, S-1151, 3.70GHz, Six-Core, 9MB Smart Cache (9na. Generiación - Coffee Lake)', 5399, 'procesadores', 8],
    [9, 'Procesador Intel Core i3-8100, S-1151, 3.60GHz, Quad-Core, 6MB Smart Cache (8va. Generación - Coffee Lake)', 2549, 'procesadores', 35],
    [10, 'MSI GeForce 210, 1GB GDDR3, DVI, VGA, HDCP, PCI Express 2.0', 889, 'tarjetas de video', 13],
    [11, 'Tarjeta de Video ASUS AMD Radeon RX 570, 4GB 256-bit GDDR5, PCI Express 3.0', 7399, 'tarjetas de video', 2],
    [12, 'Tarjeta de Video ASUS NVIDIA GeForce GTX 1660 SUPER EVO OC, 6GB 192-bit GDDR6, PCI Express x16 3.0', 6619, 'tarjetas de video', 0],
    [13, 'Tarjeta de Video Asus NVIDIA GeForce GTX 1050 Ti Phoenix, 4GB 128-bit GDDR5, PCI Express 3.0', 3989, 'tarjetas de video', 1],
    [14, 'Tarjeta de Video EVGA NVIDIA GeForce GT 710, 2GB 64-bit GDDR3, PCI Express 2.0', 1439, 'tarjetas de video', 36],
    [15, 'Tarjeta de Video EVGA NVIDIA GeForce GTX 1660 Ti SC Ultra Gaming, 6GB 192-bit GDDR6, PCI 3.0', 8439, 'tarjetas de video', 15],
    [16, 'Tarjeta de Video EVGA NVIDIA GeForce RTX 2060 SC ULTRA Gaming, 6GB 192-bit GDDR6, PCI Express 3.0', 9799, 'tarjetas de video', 10],
    [17, 'Tarjeta de Video Gigabyte AMD Radeon R7 370 OC, 2GB 256-bit GDDR5, PCI Express 3.0', 4199, 'tarjetas de video', 1],
    [18, 'Tarjeta de Video Gigabyte NVIDIA GeForce GT 1030, 2GB 64-bit GDDR5, PCI Express x16 3.0', 2199, 'tarjetas de video', 5],
    [19, 'Tarjeta de Video Gigabyte NVIDIA GeForce GTX 1650 OC Low Profile, 4GB 128-bit GDDR5, PCI Express 3.0 x16', 4509, 'tarjetas de video', 8],
    [20, 'Tarjeta de Video Gigabyte NVIDIA GeForce RTX 2060 SUPER WINDFORCE OC, 8 GB 256 bit GDDR6, PCI Express x16 3.0', 11509, 'tarjetas de video', 10],
    [21, 'Tarjeta de Video MSI AMD Mech Radeon RX 5500 XT MECH Gaming OC, 8GB 128-bit GDDR6, PCI Express 4.0', 5159, 'tarjetas de video', 0],
    [22, 'Tarjeta de Video MSI NVIDIA GeForce GTX 1050 Ti OC, 4GB 128-bit GDDR5, PCI Express x16 3.0', 3429, 'tarjetas de video', 0],
    [23, 'Tarjeta de Video MSI Radeon X1550, 128MB 64 bit GDDR2, PCI Express x16', 909, 'tarjetas de video', 10],
    [24, 'Tarjeta de Video PNY NVIDIA GeForce RTX 2080, 8GB 256-bit GDDR6, PCI Express 3.0\xa0', 30449, 'tarjetas de video', 2],
    [25, 'Tarjeta de Video Sapphire AMD Pulse Radeon RX 5500 XT Gaming, 8GB 128-bit GDDR6, PCI Express 4.0', 5529, 'tarjetas de video', 10],
    [26, 'Tarjeta de Video VisionTek AMD Radeon HD 5450, 1GB DDR3, PCI Express x16 2.1', 1249, 'tarjetas de video', 180],
    [27, 'Tarjeta de Video VisionTek AMD Radeon HD5450, 2GB GDDR3, PCI Express x16', 2109, 'tarjetas de video', 43],
    [28, 'Tarjeta de Video Zotac NVIDIA GeForce GTX 1660 Ti, 6GB 192-bit GDDR6, PCI Express x16 3.0', 9579, 'tarjetas de video', 3],
    [29, 'Tarjeta Madre ASUS micro ATX TUF B450M-PLUS GAMING, S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 2499, 'tarjetas madre', 10],
    [30, 'Tarjeta Madre AORUS ATX Z390 ELITE, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel', 4029, 'tarjetas madre', 50],
    [31, 'Tarjeta Madre AORUS micro ATX B450 AORUS M (rev. 1.0), S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 2229, 'tarjetas madre', 120],
    [32, 'Tarjeta Madre ASRock Z390 Phantom Gaming 4, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 4309, 'tarjetas madre', 10],
    [33, 'Tarjeta Madre ASUS ATX PRIME Z390-A, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 4269, 'tarjetas madre', 43],
    [34, 'Tarjeta Madre ASUS ATX ROG STRIX B550-F GAMING WI-FI, S-AM4, AMD B550, HDMI, max. 128GB DDR4 para AMD', 5289, 'tarjetas madre', 2],
    [35, 'Tarjeta Madre Gigabyte micro ATX Z390 M GAMING, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 3419, 'tarjetas madre', 30],
    [36, 'Tarjeta Madre Gigabyte micro ATX Z490M GAMING X (rev. 1.0), Intel Z490, HDMI, 128GB DDR4 para Intel', 4159, 'tarjetas madre', 10],
    [37, 'Tarjeta Madre ASRock ATX Z490 STEEL LEGEND, S-1200, Intel Z490, HDMI, 128GB DDR4 para Intel', 4289, 'tarjetas madre', 60],
    [38, 'Tarjeta Madre Gigabyte Micro ATX H310M DS2 2.0, S-1151, Intel H310, 32GB DDR4 para Intel\xa0', 1369, 'tarjetas madre', 15],
    [39, 'ASUS T. Madre uATX M4A88T-M, S-AM3, DDR3 para Phenom II/Athlon II/Sempron 100', 2169, 'tarjetas madre', 98],
    [40, 'Tarjeta Madre Gigabyte XL-ATX TRX40 Designare, S-sTRX4, AMD TRX40, 256GB DDR4 para AMD', 17439, 'tarjetas madre', 1],
    [41, 'Tarjeta Madre ASUS micro ATX Prime H370M-Plus/CSM, S-1151, Intel H370, HDMI, 64GB DDR4 para Intel', 3329, 'tarjetas madre', 286],
    [42, 'Tarjeta Madre ASRock Micro ATX B450M Steel Legend, S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 1779, 'tarjetas madre', 0],
    [43, 'Tarjeta Madre ASUS ATX ROG STRIX Z390-E GAMING, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel', 6369, 'tarjetas madre', 5],
    [44, 'Tarjeta Madre MSI ATX B450 TOMAHAWK MAX, S-AM4, AMD B450, 64GB DDR4 para AMD', 2759, 'tarjetas madre', 0],
    [45, 'Tarjeta Madre ASRock ATX H110 Pro BTC+, S-1151, Intel H110, 32GB DDR4, para Intel', 2869, 'tarjetas madre', 25],
    [46, 'Tarjeta Madre Gigabyte micro ATX GA-H110M-DS2, S-1151, Intel H110, 32GB DDR4 para Intel', 1539, 'tarjetas madre', 49],
    [47, 'SSD XPG SX8200 Pro, 256GB, PCI Express, M.2', 1209, 'discos duros', 8],
    [48, 'SSD Kingston A2000 NVMe, 1TB, PCI Express 3.0, M2', 2559, 'discos duros', 50],
    [49, 'Kit SSD Kingston KC600, 1TB, SATA III, 2.5, 7mm', 3139, 'discos duros', 3],
    [50, 'SSD Crucial MX500, 1TB, SATA III, M.2', 2949, 'discos duros', 4],
    [51, 'SSD Kingston UV500, 480GB, SATA III, mSATA', 2399, 'discos duros', 0],
    [52, 'SSD Western Digital WD Blue 3D NAND, 2TB, M.2', 5659, 'discos duros', 13],
    [53, 'SSD Addlink Technology S70, 512GB, PCI Express 3.0, M.2', 2039, 'discos duros', 1],
    [54, "SSD Kingston A400, 120GB, SATA III, 2.5'', 7mm", 259, 'discos duros', 300],
    [55, 'SSD para Servidor Supermicro SSD-DM128-SMCMVN1, 128GB, SATA III, mSATA, 6Gbit/s', 4399, 'discos duros', 10],
    [56, "SSD para Servidor Lenovo Thinksystem S4500, 480GB, SATA III, 3.5'', 7mm", 3269, 'discos duros', 3],
    [57, "SSD Adata Ultimate SU800, 256GB, SATA III, 2.5'', 7mm", 889, 'discos duros', 15],
    [58, "SSD para Servidor Lenovo Thinksystem S4510, 480GB, SATA III, 2.5'', 7mm", 3679, 'discos duros', 16],
    [59, 'SSD Samsung 860 EVO, 1TB, SATA III, M.2', 5539, 'discos duros', 10],
    [60, 'Kit Memoria RAM Corsair Dominator Platinum DDR4, 3200MHz, 16GB (2x 8GB), Non-ECC, CL16, XMP', 2519, 'memorias usb', 10],
    [61, 'Kit Memoria RAM Corsair Vengeance LPX DDR4, 2400MHz, 32GB, Non-ECC, CL16', 5209, 'memorias usb', 5],
    [62, "Makena Smart TV LED 32S2 32'', HD, Widescreen, Gris", 2899, 'pantallas', 6],
    [63, 'Seiki TV LED SC-39HS950N 38.5, HD, Widescreen, Negro', 3369, 'pantallas', 146],
    [64, 'Samsung TV LED LH43QMREBGCXGO 43, 4K Ultra HD, Widescreen, Negro', 12029, 'pantallas', 71],
    [65, 'Samsung Smart TV LED UN70RU7100FXZX 70, 4K Ultra HD, Widescreen, Negro', 21079, 'pantallas', 7],
    [66, 'TCL Smart TV LED 55S425 54.6, 4K Ultra HD, Widescreen, Negro', 8049, 'pantallas', 188],
    [67, 'TV Monitor LED 24TL520S-PU 24, HD, Widescreen, HDMI, Negro', 3229, 'pantallas', 411],
    [68, "Makena Smart TV LED 40S2 40'', Full HD, Widescreen, Negro", 4229, 'pantallas', 239],
    [69, 'Hisense Smart TV LED 40H5500F 39.5, Full HD, Widescreen, Negro', 5359, 'pantallas', 94],
    [70, 'Samsung Smart TV LED 43, Full HD, Widescreen, Negro', 7679, 'pantallas', 10],
    [71, 'Samsung Smart TV LED UN32J4290AF 32, HD, Widescreen, Negro', 4829, 'pantallas', 3],
    [72, 'Hisense Smart TV LED 50H8F 49.5, 4K Ultra HD, Widescreen, Negro', 9759, 'pantallas', 11],
    [73, 'Samsung Smart TV LED UN55TU7000FXZX 55, 4K Ultra HD, Widescreen, Negro/Gris', 10559, 'pantallas', 4],
    [74, 'Logitech Bocinas para Computadora con Subwoofer G560, Bluetooth, Inalámbrico, 2.1, 120W RMS, USB, negro', 4239, 'bocinas', 1],
    [75, 'Lenovo Barra de Sonido, Alámbrico, 2.5W, USB, Negro', 441, 'bocinas', 11],
    [76, 'Acteck Bocina con Subwoofer AXF-290, Bluetooth, Inalámbrico, 2.1, 18W RMS, 180W PMPO, USB, Negro', 589, 'bocinas', 18],
    [77, 'Verbatim Bocina Portátil Mini, Bluetooth, Inalámbrico, 3W RMS, USB, Blanco', 178, 'bocinas', 1],
    [78, 'Ghia Bocina Portátil BX300, Bluetooth, Inalámbrico, 40W RMS, USB, Rojo - Resistente al Agua', 769, 'bocinas', 2],
    [79, 'Naceb Bocina Portátil NA-0301, Bluetooth, Inalámbrico, USB 2.0, Rojo', 709, 'bocinas', 31],
    [80, 'Ghia Bocina Portátil BX800, Bluetooth, Inalámbrico, 2.1 Canales, 31W, USB, Negro', 1359, 'bocinas', 15],
    [81, 'Ghia Bocina Portátil BX900, Bluetooth, Inalámbrico, 2.1 Canales, 34W, USB, Negro - Resistente al Agua', 1169, 'bocinas', 20],
    [82, 'Ghia Bocina Portátil BX400, Bluetooth, Inalámbrico, 8W RMS, USB, Negro', 549, 'bocinas', 31],
    [83, 'Ghia Bocina Portátil BX500, Bluetooth, Inalámbrico, 10W RMS, USB, Gris', 499, 'bocinas', 16],
    [84, 'Logitech Audífonos Gamer G332, Alámbrico, 2 Metros, 3.5mm, Negro/Rojo', 1089, 'audifonos', 83],
    [85, 'Logitech Audífonos Gamer G635 7.1, Alámbrico, 1.5 Metros, 3.5mm, Negro/Azul', 2159, 'audifonos', 39],
    [86, 'ASUS Audífonos Gamer ROG Theta 7.1, Alámbrico, USB C, Negro', 8359, 'audifonos', 20],
    [87, 'Acer Audífonos Gamer Galea 300, Alámbrico, 3.5mm, Negro', 1719, 'audifonos', 8],
    [88, 'Audífonos Gamer Balam Rush Orphix RGB 7.1, Alámbrico, USB, Negro', 909, 'audifonos', 15],
    [89, 'Cougar Audífonos Gamer Phontum Essential, Alámbrico, 1.9 Metros, 3.5mm, Negro.', 859, 'audifonos', 4],
    [90, 'Energy Sistem Audífonos con Micrófono Headphones 1, Bluetooh, Inalámbrico, Negro/Grafito', 539, 'audifonos', 1],
    [91, 'Genius GHP-400S Audífonos, Alámbrico, 1.5 Metros, Rosa', 137, 'audifonos', 16],
    [92, 'Getttech Audífonos con Micrófono Sonority, Alámbrico, 1.2 Metros, 3.5mm, Negro/Rosa', 149, 'audifonos', 232],
    [93, 'Ginga Audífonos con Micrófono GI18ADJ01BT-RO, Bluetooth, Alámbrico/Inalámbrico, 3.5mm, Rojo', 160, 'audifonos', 139],
    [94, 'HyperX Audífonos Gamer Cloud Flight para PC/PS4/PS4 Pro, Inalámbrico, USB, 3.5mm, Negro', 2869, 'audifonos', 12],
    [95, 'Iogear Audífonos Gamer GHG601, Alámbrico, 1.2 Metros, 3.5mm, Negro', 999, 'audifonos', 2],
    [96, 'Klip Xtreme Audífonos Blast, Bluetooth, Inalámbrico, Negro/Verde', 769, 'audifonos', 2]
]

# Definimos la lista de ventas

lifestore_sales = [
    [1, 1, 5, '24/07/2020', 0],
    [2, 1, 5, '27/07/2020', 0],
    [3, 2, 5, '24/02/2020', 0],
    [4, 2, 5, '22/05/2020', 0],
    [5, 2, 5, '01/01/2020', 0],
    [6, 2, 5, '24/04/2020', 0],
    [7, 2, 4, '31/01/2020', 0],
    [8, 2, 4, '07/02/2020', 0],
    [9, 2, 4, '02/03/2020', 0],
    [10, 2, 4, '07/03/2020', 0],
    [11, 2, 4, '24/03/2020', 0],
    [12, 2, 4, '24/04/2020', 0],
    [13, 2, 4, '02/05/2020', 0],
    [14, 2, 4, '03/06/2020', 0],
    [15, 2, 3, '10/11/2019', 1],
    [16, 3, 5, '21/07/2020', 0],
    [17, 3, 4, '21/07/2020', 0],
    [18, 3, 5, '11/06/2020', 0],
    [19, 3, 5, '11/06/2020', 0],
    [20, 3, 5, '20/05/2020', 0],
    [21, 3, 5, '15/05/2020', 0],
    [22, 3, 5, '02/05/2020', 0],
    [23, 3, 5, '30/04/2020', 0],
    [24, 3, 5, '27/04/2020', 0],
    [25, 3, 4, '22/04/2020', 0],
    [26, 3, 5, '19/04/2020', 0],
    [27, 3, 5, '16/04/2020', 0],
    [28, 3, 3, '14/04/2020', 0],
    [29, 3, 5, '14/04/2020', 0],
    [30, 3, 5, '14/04/2020', 0],
    [31, 3, 5, '13/04/2020', 0],
    [32, 3, 5, '13/04/2020', 0],
    [33, 3, 5, '06/04/2020', 0],
    [34, 3, 5, '02/04/2020', 0],
    [35, 3, 5, '01/04/2020', 0],
    [36, 3, 5, '16/03/2020', 0],
    [37, 3, 5, '11/03/2020', 0],
    [38, 3, 4, '10/03/2020', 0],
    [39, 3, 5, '02/03/2020', 0],
    [40, 3, 5, '27/02/2020', 0],
    [41, 3, 4, '27/02/2020', 0],
    [42, 3, 5, '03/02/2020', 0],
    [43, 3, 5, '31/01/2020', 0],
    [44, 3, 5, '30/01/2020', 0],
    [45, 3, 5, '28/01/2020', 0],
    [46, 3, 5, '25/01/2020', 0],
    [47, 3, 5, '19/01/2020', 0],
    [48, 3, 5, '13/01/2020', 0],
    [49, 3, 5, '11/01/2020', 0],
    [50, 3, 4, '09/01/2020', 0],
    [51, 3, 5, '08/01/2020', 0],
    [52, 3, 4, '06/01/2020', 0],
    [53, 3, 5, '04/01/2020', 0],
    [54, 3, 5, '04/01/2020', 0],
    [55, 3, 5, '03/01/2020', 0],
    [56, 3, 5, '02/01/2020', 0],
    [57, 3, 5, '01/01/2020', 0],
    [58, 4, 4, '19/06/2020', 0],
    [59, 4, 4, '04/06/2020', 0],
    [60, 4, 5, '16/04/2020', 0],
    [61, 4, 4, '07/04/2020', 0],
    [62, 4, 5, '06/04/2020', 0],
    [63, 4, 5, '06/04/2020', 0],
    [64, 4, 5, '30/03/2020', 0],
    [65, 4, 4, '08/03/2020', 0],
    [66, 4, 5, '25/02/2020', 0],
    [67, 4, 3, '29/01/2020', 0],
    [68, 4, 5, '23/01/2020', 0],
    [69, 4, 4, '11/01/2020', 0],
    [70, 4, 5, '09/01/2020', 0],
    [71, 5, 4, '03/07/2020', 0],
    [72, 5, 4, '14/05/2020', 0],
    [73, 5, 4, '05/05/2020', 0],
    [74, 5, 5, '04/05/2020', 0],
    [75, 5, 4, '04/05/2020', 0],
    [76, 5, 5, '03/05/2020', 0],
    [77, 5, 5, '26/04/2020', 0],
    [78, 5, 5, '23/04/2020', 0],
    [79, 5, 5, '17/04/2020', 0],
    [80, 5, 5, '13/04/2020', 0],
    [81, 5, 5, '06/04/2020', 0],
    [82, 5, 5, '26/04/2020', 0],
    [83, 5, 5, '24/03/2020', 0],
    [84, 5, 5, '22/03/2020', 0],
    [85, 5, 4, '10/03/2020', 0],
    [86, 5, 5, '25/02/2020', 0],
    [87, 5, 4, '24/02/2020', 0],
    [88, 5, 5, '15/02/2020', 0],
    [89, 5, 5, '30/01/2020', 0],
    [90, 5, 5, '17/01/2020', 0],
    [91, 6, 5, '05/05/2020', 0],
    [92, 6, 5, '22/03/2020', 0],
    [93, 6, 5, '04/02/2020', 0],
    [94, 7, 5, '25/07/2020', 0],
    [95, 7, 5, '17/06/2020', 0],
    [96, 7, 5, '15/04/2020', 0],
    [97, 7, 5, '03/04/2020', 0],
    [98, 7, 5, '31/03/2020', 0],
    [99, 7, 5, '28/03/2020', 0],
    [100, 7, 5, '22/02/2020', 0],
    [101, 8, 5, '20/04/2020', 0],
    [102, 8, 5, '16/02/2020', 0],
    [103, 8, 5, '27/01/2020', 0],
    [104, 8, 5, '20/01/2020', 0],
    [105, 10, 4, '14/05/2020', 0],
    [106, 11, 5, '30/06/2020', 0],
    [107, 11, 5, '02/04/2020', 0],
    [108, 11, 5, '05/03/2020', 0],
    [109, 12, 5, '05/05/2020', 0],
    [110, 12, 4, '09/04/2020', 0],
    [111, 12, 5, '09/04/2020', 0],
    [112, 12, 5, '02/04/2020', 0],
    [113, 12, 5, '25/03/2020', 0],
    [114, 12, 5, '24/03/2020', 0],
    [115, 12, 5, '06/03/2020', 0],
    [116, 12, 5, '04/03/2020', 0],
    [117, 12, 4, '27/02/2020', 0],
    [118, 13, 4, '17/04/2020', 0],
    [119, 17, 1, '05/09/2020', 1],
    [120, 18, 5, '30/06/2020', 0],
    [121, 18, 4, '14/03/2020', 0],
    [122, 18, 5, '27/02/2020', 0],
    [123, 18, 4, '02/02/2020', 0],
    [124, 18, 4, '01/02/2020', 0],
    [125, 21, 5, '14/04/2020', 0],
    [126, 21, 5, '12/02/2020', 0],
    [127, 22, 5, '20/04/2020', 0],
    [128, 25, 5, '28/03/2020', 0],
    [129, 25, 5, '20/03/2020', 0],
    [130, 28, 5, '30/03/2020', 0],
    [131, 29, 4, '04/05/2020', 0],
    [132, 29, 5, '24/04/2020', 0],
    [133, 29, 4, '24/04/2020', 0],
    [134, 29, 4, '17/04/2020', 0],
    [135, 29, 5, '04/04/2020', 0],
    [136, 29, 5, '09/03/2020', 0],
    [137, 29, 5, '07/03/2020', 0],
    [138, 29, 5, '26/02/2020', 0],
    [139, 29, 5, '09/02/2020', 0],
    [140, 29, 5, '06/02/2020', 0],
    [141, 29, 5, '26/01/2020', 0],
    [142, 29, 4, '25/01/2020', 0],
    [143, 29, 1, '13/01/2020', 1],
    [144, 29, 1, '10/01/2020', 0],
    [145, 31, 1, '02/05/2020', 1],
    [146, 31, 1, '02/05/2020', 1],
    [147, 31, 1, '01/04/2020', 1],
    [148, 31, 4, '20/03/2020', 0],
    [149, 31, 3, '14/03/2020', 0],
    [150, 31, 1, '11/01/2020', 0],
    [151, 33, 5, '20/03/2020', 0],
    [152, 33, 4, '27/02/2020', 0],
    [153, 40, 5, '24/05/2020', 0],
    [154, 42, 5, '27/07/2020', 0],
    [155, 42, 5, '04/05/2020', 0],
    [156, 42, 4, '04/05/2020', 0],
    [157, 42, 4, '04/05/2020', 0],
    [158, 42, 5, '04/05/2020', 0],
    [159, 42, 5, '27/04/2020', 0],
    [160, 42, 5, '26/04/2020', 0],
    [161, 42, 4, '19/04/2020', 0],
    [162, 42, 5, '14/04/2020', 0],
    [163, 42, 5, '09/04/2020', 0],
    [164, 42, 4, '05/04/2020', 0],
    [165, 42, 4, '21/03/2020', 0],
    [166, 42, 5, '09/03/2020', 0],
    [167, 42, 5, '09/03/2020', 0],
    [168, 42, 5, '03/03/2020', 0],
    [169, 42, 4, '23/02/2020', 0],
    [170, 42, 4, '03/02/2020', 0],
    [171, 42, 4, '09/01/2020', 0],
    [172, 44, 5, '16/04/2020', 0],
    [173, 44, 5, '11/04/2020', 0],
    [174, 44, 5, '21/03/2020', 0],
    [175, 44, 4, '02/03/2020', 0],
    [176, 44, 4, '01/03/2020', 0],
    [177, 44, 5, '05/01/2020', 0],
    [178, 45, 1, '11/02/2020', 1],
    [179, 46, 2, '07/03/2020', 1],
    [180, 47, 4, '02/07/2020', 0],
    [181, 47, 5, '10/06/2020', 0],
    [182, 47, 5, '18/04/2020', 0],
    [183, 47, 4, '16/04/2020', 0],
    [184, 47, 5, '08/04/2020', 0],
    [185, 47, 4, '07/04/2020', 0],
    [186, 47, 5, '23/03/2020', 0],
    [187, 47, 5, '10/03/2020', 0],
    [188, 47, 3, '11/02/2020', 0],
    [189, 47, 5, '18/01/2020', 0],
    [190, 47, 5, '17/01/2020', 0],
    [191, 48, 4, '02/08/2020', 0],
    [192, 48, 3, '27/04/2020', 0],
    [193, 48, 5, '25/04/2020', 0],
    [194, 48, 5, '23/04/2020', 0],
    [195, 48, 5, '22/02/2020', 0],
    [196, 48, 5, '10/02/2020', 0],
    [197, 48, 5, '14/01/2020', 0],
    [198, 48, 5, '09/01/2020', 0],
    [199, 48, 5, '09/01/2020', 0],
    [200, 49, 5, '06/04/2020', 0],
    [201, 49, 5, '19/04/2020', 0],
    [202, 49, 5, '22/04/2020', 0],
    [203, 50, 5, '04/05/2020', 0],
    [204, 51, 5, '23/03/2020', 0],
    [205, 51, 4, '04/02/2020', 0],
    [206, 51, 5, '03/01/2020', 0],
    [207, 52, 5, '19/03/2020', 0],
    [208, 52, 5, '02/01/2020', 0],
    [209, 54, 4, '03/08/2020', 0],
    [210, 54, 5, '02/08/2020', 0],
    [211, 54, 5, '04/07/2020', 0],
    [212, 54, 5, '01/07/2020', 0],
    [213, 54, 5, '03/06/2020', 0],
    [214, 54, 5, '23/05/2020', 0],
    [215, 54, 4, '15/05/2020', 0],
    [216, 54, 5, '11/05/2020', 0],
    [217, 54, 5, '08/05/2020', 0],
    [218, 54, 5, '04/05/2020', 0],
    [219, 54, 4, '04/05/2002', 0],
    [220, 54, 5, '04/05/2020', 0],
    [221, 54, 5, '04/05/2020', 0],
    [222, 54, 4, '30/04/2020', 0],
    [223, 54, 4, '24/04/2020', 0],
    [224, 54, 5, '23/04/2020', 0],
    [225, 54, 4, '17/04/2020', 0],
    [226, 54, 5, '15/04/2020', 0],
    [227, 54, 5, '14/04/2020', 0],
    [228, 54, 4, '14/04/2020', 0],
    [229, 54, 5, '13/04/2020', 0],
    [230, 54, 5, '13/04/2020', 0],
    [231, 54, 5, '13/04/2020', 0],
    [232, 54, 5, '09/04/2020', 0],
    [233, 54, 5, '03/04/2020', 0],
    [234, 54, 5, '03/04/2020', 0],
    [235, 54, 5, '30/03/2020', 0],
    [236, 54, 5, '26/03/2020', 0],
    [237, 54, 5, '20/03/2020', 0],
    [238, 54, 2, '19/03/2020', 1],
    [239, 54, 5, '17/03/2020', 0],
    [240, 54, 5, '14/03/2020', 0],
    [241, 54, 5, '13/03/2020', 0],
    [242, 54, 4, '02/03/2020', 0],
    [243, 54, 5, '01/03/2020', 0],
    [244, 54, 5, '25/02/2020', 0],
    [245, 54, 5, '20/02/2020', 0],
    [246, 54, 4, '17/02/2020', 0],
    [247, 54, 5, '14/02/2020', 0],
    [248, 54, 5, '12/02/2020', 0],
    [249, 54, 4, '10/02/2020', 0],
    [250, 54, 5, '07/02/2020', 0],
    [251, 54, 5, '31/01/2020', 0],
    [252, 54, 5, '30/01/2020', 0],
    [253, 54, 5, '29/01/2020', 0],
    [254, 54, 5, '27/01/2020', 0],
    [255, 54, 5, '25/01/2020', 0],
    [256, 54, 5, '23/01/2020', 0],
    [257, 54, 5, '23/01/2020', 0],
    [258, 54, 4, '22/01/2020', 0],
    [259, 57, 5, '05/07/2020', 0],
    [260, 57, 5, '23/05/2020', 0],
    [261, 57, 5, '23/05/2020', 0],
    [262, 57, 5, '01/05/2020', 0],
    [263, 57, 5, '06/04/2020', 0],
    [264, 57, 5, '09/03/2020', 0],
    [265, 57, 5, '25/02/2020', 0],
    [266, 57, 5, '10/02/2020', 0],
    [267, 57, 4, '04/02/2020', 0],
    [268, 57, 5, '04/02/2020', 0],
    [269, 57, 5, '28/01/2020', 0],
    [270, 57, 5, '27/01/2020', 0],
    [271, 57, 4, '22/01/2020', 0],
    [272, 57, 5, '08/01/2020', 0],
    [273, 57, 5, '07/01/2020', 0],
    [274, 60, 5, '17/06/2020', 0],
    [275, 66, 5, '06/05/2020', 0],
    [276, 67, 5, '24/04/2020', 0],
    [277, 74, 4, '12/02/2020', 0],
    [278, 74, 5, '18/02/2020', 0],
    [279, 84, 5, '05/05/2020', 0],
    [280, 85, 5, '05/05/2020', 0],
    [281, 85, 5, '28/04/2020', 0],
    [282, 89, 3, '06/01/2020', 0],
    [283, 94, 4, '10/04/2020', 0]
]

# Definimos la lista de búsquedas

lifestore_searches = [
    
    [1, 1],
    [2, 1],
    [3, 1],
    [4, 1],
    [5, 1],
    [6, 1],
    [7, 1],
    [8, 1],
    [9, 1],
    [10, 1],
    [11, 2],
    [12, 2],
    [13, 2],
    [14, 2],
    [15, 2],
    [16, 2],
    [17, 2],
    [18, 2],
    [19, 2],
    [20, 2],
    [21, 2],
    [22, 2],
    [23, 2],
    [24, 2],
    [25, 2],
    [26, 2],
    [27, 2],
    [28, 2],
    [29, 2],
    [30, 2],
    [31, 2],
    [32, 2],
    [33, 2],
    [34, 2],
    [35, 3],
    [36, 3],
    [37, 3],
    [38, 3],
    [39, 3],
    [40, 3],
    [41, 3],
    [42, 3],
    [43, 3],
    [44, 3],
    [45, 3],
    [46, 3],
    [47, 3],
    [48, 3],
    [49, 3],
    [50, 3],
    [51, 3],
    [52, 3],
    [53, 3],
    [54, 3],
    [55, 3],
    [56, 3],
    [57, 3],
    [58, 3],
    [59, 3],
    [60, 3],
    [61, 3],
    [62, 3],
    [63, 3],
    [64, 3],
    [65, 3],
    [66, 3],
    [67, 3],
    [68, 3],
    [69, 3],
    [70, 3],
    [71, 3],
    [72, 3],
    [73, 3],
    [74, 3],
    [75, 3],
    [76, 3],
    [77, 3],
    [78, 3],
    [79, 3],
    [80, 3],
    [81, 3],
    [82, 3],
    [83, 3],
    [84, 3],
    [85, 3],
    [86, 3],
    [87, 3],
    [88, 3],
    [89, 3],
    [90, 4],
    [91, 4],
    [92, 4],
    [93, 4],
    [94, 4],
    [95, 4],
    [96, 4],
    [97, 4],
    [98, 4],
    [99, 4],
    [100, 4],
    [101, 4],
    [102, 4],
    [103, 4],
    [104, 4],
    [105, 4],
    [106, 4],
    [107, 4],
    [108, 4],
    [109, 4],
    [110, 4],
    [111, 4],
    [112, 4],
    [113, 4],
    [114, 4],
    [115, 4],
    [116, 4],
    [117, 4],
    [118, 4],
    [119, 4],
    [120, 4],
    [121, 4],
    [122, 4],
    [123, 4],
    [124, 4],
    [125, 4],
    [126, 4],
    [127, 4],
    [128, 4],
    [129, 4],
    [130, 4],
    [131, 5],
    [132, 5],
    [133, 5],
    [134, 5],
    [135, 5],
    [136, 5],
    [137, 5],
    [138, 5],
    [139, 5],
    [140, 5],
    [141, 5],
    [142, 5],
    [143, 5],
    [144, 5],
    [145, 5],
    [146, 5],
    [147, 5],
    [148, 5],
    [149, 5],
    [150, 5],
    [151, 5],
    [152, 5],
    [153, 5],
    [154, 5],
    [155, 5],
    [156, 5],
    [157, 5],
    [158, 5],
    [159, 5],
    [160, 5],
    [161, 6],
    [162, 6],
    [163, 6],
    [164, 6],
    [165, 6],
    [166, 6],
    [167, 6],
    [168, 6],
    [169, 6],
    [170, 6],
    [171, 7],
    [172, 7],
    [173, 7],
    [174, 7],
    [175, 7],
    [176, 7],
    [177, 7],
    [178, 7],
    [179, 7],
    [180, 7],
    [181, 7],
    [182, 7],
    [183, 7],
    [184, 7],
    [185, 7],
    [186, 7],
    [187, 7],
    [188, 7],
    [189, 7],
    [190, 7],
    [191, 7],
    [192, 7],
    [193, 7],
    [194, 7],
    [195, 7],
    [196, 7],
    [197, 7],
    [198, 7],
    [199, 7],
    [200, 7],
    [201, 7],
    [202, 8],
    [203, 8],
    [204, 8],
    [205, 8],
    [206, 8],
    [207, 8],
    [208, 8],
    [209, 8],
    [210, 8],
    [211, 8],
    [212, 8],
    [213, 8],
    [214, 8],
    [215, 8],
    [216, 8],
    [217, 8],
    [218, 8],
    [219, 8],
    [220, 8],
    [221, 8],
    [222, 9],
    [223, 10],
    [224, 11],
    [225, 11],
    [226, 11],
    [227, 11],
    [228, 11],
    [229, 12],
    [230, 12],
    [231, 12],
    [232, 12],
    [233, 12],
    [234, 12],
    [235, 12],
    [236, 12],
    [237, 12],
    [238, 12],
    [239, 12],
    [240, 12],
    [241, 12],
    [242, 12],
    [243, 12],
    [244, 13],
    [245, 13],
    [246, 15],
    [247, 15],
    [248, 15],
    [249, 15],
    [250, 17],
    [251, 17],
    [252, 17],
    [253, 18],
    [254, 18],
    [255, 18],
    [256, 18],
    [257, 18],
    [258, 18],
    [259, 18],
    [260, 18],
    [261, 18],
    [262, 18],
    [263, 18],
    [264, 21],
    [265, 21],
    [266, 21],
    [267, 21],
    [268, 21],
    [269, 21],
    [270, 21],
    [271, 21],
    [272, 21],
    [273, 21],
    [274, 21],
    [275, 21],
    [276, 21],
    [277, 21],
    [278, 21],
    [279, 22],
    [280, 22],
    [281, 22],
    [282, 22],
    [283, 22],
    [284, 25],
    [285, 25],
    [286, 25],
    [287, 25],
    [288, 25],
    [289, 25],
    [290, 25],
    [291, 25],
    [292, 25],
    [293, 25],
    [294, 26],
    [295, 26],
    [296, 26],
    [297, 26],
    [298, 26],
    [299, 27],
    [300, 28],
    [301, 28],
    [302, 28],
    [303, 28],
    [304, 28],
    [305, 29],
    [306, 29],
    [307, 29],
    [308, 29],
    [309, 29],
    [310, 29],
    [311, 29],
    [312, 29],
    [313, 29],
    [314, 29],
    [315, 29],
    [316, 29],
    [317, 29],
    [318, 29],
    [319, 29],
    [320, 29],
    [321, 29],
    [322, 29],
    [323, 29],
    [324, 29],
    [325, 29],
    [326, 29],
    [327, 29],
    [328, 29],
    [329, 29],
    [330, 29],
    [331, 29],
    [332, 29],
    [333, 29],
    [334, 29],
    [335, 29],
    [336, 29],
    [337, 29],
    [338, 29],
    [339, 29],
    [340, 29],
    [341, 29],
    [342, 29],
    [343, 29],
    [344, 29],
    [345, 29],
    [346, 29],
    [347, 29],
    [348, 29],
    [349, 29],
    [350, 29],
    [351, 29],
    [352, 29],
    [353, 29],
    [354, 29],
    [355, 29],
    [356, 29],
    [357, 29],
    [358, 29],
    [359, 29],
    [360, 29],
    [361, 29],
    [362, 29],
    [363, 29],
    [364, 29],
    [365, 31],
    [366, 31],
    [367, 31],
    [368, 31],
    [369, 31],
    [370, 31],
    [371, 31],
    [372, 31],
    [373, 31],
    [374, 31],
    [375, 35],
    [376, 39],
    [377, 39],
    [378, 39],
    [379, 40],
    [380, 40],
    [381, 40],
    [382, 40],
    [383, 40],
    [384, 40],
    [385, 40],
    [386, 40],
    [387, 40],
    [388, 40],
    [389, 42],
    [390, 42],
    [391, 42],
    [392, 42],
    [393, 42],
    [394, 42],
    [395, 42],
    [396, 42],
    [397, 42],
    [398, 42],
    [399, 42],
    [400, 42],
    [401, 42],
    [402, 42],
    [403, 42],
    [404, 42],
    [405, 42],
    [406, 42],
    [407, 42],
    [408, 42],
    [409, 42],
    [410, 42],
    [411, 42],
    [412, 44],
    [413, 44],
    [414, 44],
    [415, 44],
    [416, 44],
    [417, 44],
    [418, 44],
    [419, 44],
    [420, 44],
    [421, 44],
    [422, 44],
    [423, 44],
    [424, 44],
    [425, 44],
    [426, 44],
    [427, 44],
    [428, 44],
    [429, 44],
    [430, 44],
    [431, 44],
    [432, 44],
    [433, 44],
    [434, 44],
    [435, 44],
    [436, 44],
    [437, 45],
    [438, 46],
    [439, 46],
    [440, 46],
    [441, 46],
    [442, 47],
    [443, 47],
    [444, 47],
    [445, 47],
    [446, 47],
    [447, 47],
    [448, 47],
    [449, 47],
    [450, 47],
    [451, 47],
    [452, 47],
    [453, 47],
    [454, 47],
    [455, 47],
    [456, 47],
    [457, 47],
    [458, 47],
    [459, 47],
    [460, 47],
    [461, 47],
    [462, 47],
    [463, 47],
    [464, 47],
    [465, 47],
    [466, 47],
    [467, 47],
    [468, 47],
    [469, 47],
    [470, 47],
    [471, 47],
    [472, 48],
    [473, 48],
    [474, 48],
    [475, 48],
    [476, 48],
    [477, 48],
    [478, 48],
    [479, 48],
    [480, 48],
    [481, 48],
    [482, 48],
    [483, 48],
    [484, 48],
    [485, 48],
    [486, 48],
    [487, 48],
    [488, 48],
    [489, 48],
    [490, 48],
    [491, 48],
    [492, 48],
    [493, 48],
    [494, 48],
    [495, 48],
    [496, 48],
    [497, 48],
    [498, 48],
    [499, 49],
    [500, 49],
    [501, 49],
    [502, 49],
    [503, 49],
    [504, 49],
    [505, 49],
    [506, 49],
    [507, 49],
    [508, 49],
    [509, 50],
    [510, 50],
    [511, 50],
    [512, 50],
    [513, 50],
    [514, 50],
    [515, 50],
    [516, 51],
    [517, 51],
    [518, 51],
    [519, 51],
    [520, 51],
    [521, 51],
    [522, 51],
    [523, 51],
    [524, 51],
    [525, 51],
    [526, 51],
    [527, 52],
    [528, 52],
    [529, 52],
    [530, 52],
    [531, 52],
    [532, 54],
    [533, 54],
    [534, 54],
    [535, 54],
    [536, 54],
    [537, 54],
    [538, 54],
    [539, 54],
    [540, 54],
    [541, 54],
    [542, 54],
    [543, 54],
    [544, 54],
    [545, 54],
    [546, 54],
    [547, 54],
    [548, 54],
    [549, 54],
    [550, 54],
    [551, 54],
    [552, 54],
    [553, 54],
    [554, 54],
    [555, 54],
    [556, 54],
    [557, 54],
    [558, 54],
    [559, 54],
    [560, 54],
    [561, 54],
    [562, 54],
    [563, 54],
    [564, 54],
    [565, 54],
    [566, 54],
    [567, 54],
    [568, 54],
    [569, 54],
    [570, 54],
    [571, 54],
    [572, 54],
    [573, 54],
    [574, 54],
    [575, 54],
    [576, 54],
    [577, 54],
    [578, 54],
    [579, 54],
    [580, 54],
    [581, 54],
    [582, 54],
    [583, 54],
    [584, 54],
    [585, 54],
    [586, 54],
    [587, 54],
    [588, 54],
    [589, 54],
    [590, 54],
    [591, 54],
    [592, 54],
    [593, 54],
    [594, 54],
    [595, 54],
    [596, 54],
    [597, 54],
    [598, 54],
    [599, 54],
    [600, 54],
    [601, 54],
    [602, 54],
    [603, 54],
    [604, 54],
    [605, 54],
    [606, 54],
    [607, 54],
    [608, 54],
    [609, 54],
    [610, 54],
    [611, 54],
    [612, 54],
    [613, 54],
    [614, 54],
    [615, 54],
    [616, 54],
    [617, 54],
    [618, 54],
    [619, 54],
    [620, 54],
    [621, 54],
    [622, 54],
    [623, 54],
    [624, 54],
    [625, 54],
    [626, 54],
    [627, 54],
    [628, 54],
    [629, 54],
    [630, 54],
    [631, 54],
    [632, 54],
    [633, 54],
    [634, 54],
    [635, 54],
    [636, 54],
    [637, 54],
    [638, 54],
    [639, 54],
    [640, 54],
    [641, 54],
    [642, 54],
    [643, 54],
    [644, 54],
    [645, 54],
    [646, 54],
    [647, 54],
    [648, 54],
    [649, 54],
    [650, 54],
    [651, 54],
    [652, 54],
    [653, 54],
    [654, 54],
    [655, 54],
    [656, 54],
    [657, 54],
    [658, 54],
    [659, 54],
    [660, 54],
    [661, 54],
    [662, 54],
    [663, 54],
    [664, 54],
    [665, 54],
    [666, 54],
    [667, 54],
    [668, 54],
    [669, 54],
    [670, 54],
    [671, 54],
    [672, 54],
    [673, 54],
    [674, 54],
    [675, 54],
    [676, 54],
    [677, 54],
    [678, 54],
    [679, 54],
    [680, 54],
    [681, 54],
    [682, 54],
    [683, 54],
    [684, 54],
    [685, 54],
    [686, 54],
    [687, 54],
    [688, 54],
    [689, 54],
    [690, 54],
    [691, 54],
    [692, 54],
    [693, 54],
    [694, 54],
    [695, 54],
    [696, 54],
    [697, 54],
    [698, 54],
    [699, 54],
    [700, 54],
    [701, 54],
    [702, 54],
    [703, 54],
    [704, 54],
    [705, 54],
    [706, 54],
    [707, 54],
    [708, 54],
    [709, 54],
    [710, 54],
    [711, 54],
    [712, 54],
    [713, 54],
    [714, 54],
    [715, 54],
    [716, 54],
    [717, 54],
    [718, 54],
    [719, 54],
    [720, 54],
    [721, 54],
    [722, 54],
    [723, 54],
    [724, 54],
    [725, 54],
    [726, 54],
    [727, 54],
    [728, 54],
    [729, 54],
    [730, 54],
    [731, 54],
    [732, 54],
    [733, 54],
    [734, 54],
    [735, 54],
    [736, 54],
    [737, 54],
    [738, 54],
    [739, 54],
    [740, 54],
    [741, 54],
    [742, 54],
    [743, 54],
    [744, 54],
    [745, 54],
    [746, 54],
    [747, 54],
    [748, 54],
    [749, 54],
    [750, 54],
    [751, 54],
    [752, 54],
    [753, 54],
    [754, 54],
    [755, 54],
    [756, 54],
    [757, 54],
    [758, 54],
    [759, 54],
    [760, 54],
    [761, 54],
    [762, 54],
    [763, 54],
    [764, 54],
    [765, 54],
    [766, 54],
    [767, 54],
    [768, 54],
    [769, 54],
    [770, 54],
    [771, 54],
    [772, 54],
    [773, 54],
    [774, 54],
    [775, 54],
    [776, 54],
    [777, 54],
    [778, 54],
    [779, 54],
    [780, 54],
    [781, 54],
    [782, 54],
    [783, 54],
    [784, 54],
    [785, 54],
    [786, 54],
    [787, 54],
    [788, 54],
    [789, 54],
    [790, 54],
    [791, 54],
    [792, 54],
    [793, 54],
    [794, 54],
    [795, 56],
    [796, 56],
    [797, 57],
    [798, 57],
    [799, 57],
    [800, 57],
    [801, 57],
    [802, 57],
    [803, 57],
    [804, 57],
    [805, 57],
    [806, 57],
    [807, 57],
    [808, 57],
    [809, 57],
    [810, 57],
    [811, 57],
    [812, 57],
    [813, 57],
    [814, 57],
    [815, 57],
    [816, 57],
    [817, 57],
    [818, 57],
    [819, 57],
    [820, 57],
    [821, 57],
    [822, 57],
    [823, 57],
    [824, 57],
    [825, 57],
    [826, 57],
    [827, 57],
    [828, 57],
    [829, 57],
    [830, 57],
    [831, 57],
    [832, 57],
    [833, 57],
    [834, 57],
    [835, 57],
    [836, 57],
    [837, 57],
    [838, 57],
    [839, 57],
    [840, 57],
    [841, 57],
    [842, 57],
    [843, 57],
    [844, 57],
    [845, 57],
    [846, 57],
    [847, 57],
    [848, 57],
    [849, 57],
    [850, 57],
    [851, 57],
    [852, 57],
    [853, 57],
    [854, 57],
    [855, 57],
    [856, 57],
    [857, 57],
    [858, 57],
    [859, 57],
    [860, 57],
    [861, 57],
    [862, 57],
    [863, 57],
    [864, 57],
    [865, 57],
    [866, 57],
    [867, 57],
    [868, 57],
    [869, 57],
    [870, 57],
    [871, 57],
    [872, 57],
    [873, 57],
    [874, 57],
    [875, 57],
    [876, 57],
    [877, 57],
    [878, 57],
    [879, 57],
    [880, 57],
    [881, 57],
    [882, 57],
    [883, 57],
    [884, 57],
    [885, 57],
    [886, 57],
    [887, 57],
    [888, 57],
    [889, 57],
    [890, 57],
    [891, 57],
    [892, 57],
    [893, 57],
    [894, 57],
    [895, 57],
    [896, 57],
    [897, 57],
    [898, 57],
    [899, 57],
    [900, 57],
    [901, 57],
    [902, 57],
    [903, 57],
    [904, 59],
    [905, 63],
    [906, 63],
    [907, 63],
    [908, 63],
    [909, 66],
    [910, 66],
    [911, 66],
    [912, 66],
    [913, 66],
    [914, 66],
    [915, 66],
    [916, 66],
    [917, 66],
    [918, 66],
    [919, 66],
    [920, 66],
    [921, 66],
    [922, 66],
    [923, 66],
    [924, 67],
    [925, 67],
    [926, 67],
    [927, 67],
    [928, 67],
    [929, 67],
    [930, 67],
    [931, 67],
    [932, 67],
    [933, 67],
    [934, 67],
    [935, 67],
    [936, 67],
    [937, 67],
    [938, 67],
    [939, 67],
    [940, 67],
    [941, 67],
    [942, 67],
    [943, 67],
    [944, 67],
    [945, 67],
    [946, 67],
    [947, 67],
    [948, 67],
    [949, 67],
    [950, 67],
    [951, 67],
    [952, 67],
    [953, 67],
    [954, 67],
    [955, 67],
    [956, 70],
    [957, 73],
    [958, 73],
    [959, 73],
    [960, 73],
    [961, 74],
    [962, 74],
    [963, 74],
    [964, 74],
    [965, 74],
    [966, 74],
    [967, 76],
    [968, 76],
    [969, 80],
    [970, 84],
    [971, 84],
    [972, 84],
    [973, 84],
    [974, 84],
    [975, 84],
    [976, 84],
    [977, 84],
    [978, 84],
    [979, 84],
    [980, 85],
    [981, 85],
    [982, 85],
    [983, 85],
    [984, 85],
    [985, 85],
    [986, 85],
    [987, 85],
    [988, 85],
    [989, 85],
    [990, 85],
    [991, 85],
    [992, 85],
    [993, 85],
    [994, 85],
    [995, 85],
    [996, 85],
    [997, 85],
    [998, 85],
    [999, 85],
    [1000, 85],
    [1001, 85],
    [1002, 85],
    [1003, 85],
    [1004, 85],
    [1005, 85],
    [1006, 85],
    [1007, 85],
    [1008, 85],
    [1009, 85],
    [1010, 85],
    [1011, 85],
    [1012, 85],
    [1013, 85],
    [1014, 85],
    [1015, 89],
    [1016, 89],
    [1017, 89],
    [1018, 89],
    [1019, 89],
    [1020, 89],
    [1021, 89],
    [1022, 91],
    [1023, 91],
    [1024, 93],
    [1025, 94],
    [1026, 94],
    [1027, 94],
    [1028, 94],
    [1029, 94],
    [1030, 94],
    [1031, 95],
    [1032, 95],
    [1033, 95]
]























"""
VARIABLES AUXILIARES PARA LAS FUNCIONES DEL USUARIO
"""


'''
categorias = [nombre de la categoría]

nombre_categoria = [productos en la categoria x]

productos = [nombre del producto]

'''


# Obtenemos las categorias que hay

# Lista vacia que posteriormente incluira las categorias
categorias = []

# Iteramos sobre la lista de productos para obtener las categorias
for categoria in lifestore_products:
    # Solo añade la categoría si no se encuentra en la lista categorias
    if categoria[3] not in categorias:
        categorias.append(categoria[3])
        
# Creamos listas vacias con el nombre de cada categoria

procesadores = []
tarjetas_video = []
tarjetas_madre = []
discos_duros = []
memorias_usb = []
pantallas = []
bocinas = []
audifonos = []

''' Iteramos sobre la lista de productos, usamos el índice que hace referencia
a la categoría y a partir de condicionales, separamos los productos en una 
lista distinta, dependiendo a la categoría que pertenecen'''

for product in lifestore_products:
    if product[3] == "procesadores":
        procesadores.append(product[1])
    elif product[3] == "tarjetas de video":
        tarjetas_video.append(product[1])
    elif product[3] == "tarjetas madre":
        tarjetas_madre.append(product[1])
    elif product[3] == "discos duros":
        discos_duros.append(product[1])
    elif product[3] == "memorias usb":
        memorias_usb.append(product[1])
    elif product[3] == "pantallas":
        pantallas.append(product[1])
    elif product[3] == "bocinas":
        bocinas.append(product[1])
    elif product[3] == "audifonos":
        audifonos.append(product[1])

''' Si quiero visualizar los productos, quito el gato del siguiente fragmento de
código'''

# print(procesadores)
# print(tarjetas_video)
# print(tarjetas_madre)
# print(discos_duros)
# print(memorias_usb)
# print(pantallas)
# print(bocinas)
# print(audifonos)

# Creamos una lista vacía para guardar los productos

productos = []

# Aqui iteramos sobre la lista de productos general y guardamos su nombre
for i in range(len(lifestore_products)):
    # Agregamos el nombre de cada producto en la lista productos
    productos.append(lifestore_products[i][1])
    
    
# Separamos los elementos por categoría con sus respectivas ventas

# Usamos un bucle para separar cada producto en la respectiva categoria a través de condicionales
# que verifiquen dos listas cuya coincidencia será el nombre de los productos























"""
VARIABLES AUXILIARES PARA LAS FUNCIONES DE LOS ADMINISTRADORES
"""

"""
ventas = [id_producto_vendido]
productos = [id_producto, nombre_producto]
ventas_productos = [nombre_producto, unidades_vendidas]
busquedas_productos = [nombre_producto, numero_busquedas]
promedio_resenas = [nombre_producto, reseña_promedio]
productos_devueltos = [nombre_producto, numero_devoluciones]

"""



# Creamos lista que guardara unicamente la variable id_product de la lista lifestore_sales
ventas = []
# Obtenemos solo la lista de las ventas, los id vendidos
for i in range(len(lifestore_sales)):
    # Vamos añadiendo los id del producto vendido
    ventas.append(lifestore_sales[i][1])
# Quitar el comentario si queremos ver los id de los productos vendidos    
# print(ventas)

# Obtenemos la lista de los productos con su id y su nombre
productos = []

# Llenamos la lista anterior con un for obteniendo nombre y id_producto
for product in lifestore_products:
    # Selecciono los campos que requiero
    productos.append(product[0:3])
# print(productos)




# Variable que guardara el nombre del producto y cuantas ventas tuvo
ventas_productos = []

# Hacemos un for anidado para obtener las ventas de cada producto con su
# respectivo nombre
for producto in productos:
    # Nos ayudará a guardar el número de productos vendidos
    contador = 0
    # Verifica que el producto no este ya en la lista de productos vendidos con unidades vendidas
    if producto[0] not in ventas_productos:
        # for que sirve para ver las coincidencias y asi saber cuantas unidades se vendieron
        for venta in ventas:
            # Condiconal para verificar que el id vendido sea igual al id del producto
            if producto[0] == venta:
                # Guardamos el número de unidades vendidas
                contador += 1
        # Hacemos una lista con el nombre del producto y las unidades vendidas
        lista_auxiliar = [producto[1], contador]
        # Añadimos la información anterior a una nueva lista
        ventas_productos.append(lista_auxiliar)
        
        
# Si queremos mostrar el resultado quitamos el comentario y mostramos la lista
# print(ventas_productos[4])



# Variable que guardará los productos vendidos
productos_vendidos = []
productos_no_vendidos = []

# Separamos entre los productos vendidos y no vendidos
for producto in ventas_productos:
    # Condicional para saber los productos vendidos
    if producto[1] != 0:
        # Guardamos los productos vendidos
        productos_vendidos.append(producto)
    # Condicional para saber cuales son los productos no vendidos
    else:
        # Guardamos los productos no vendidos
        productos_no_vendidos.append(producto)

# Para visualizar los productos no vendidos o vendidos quitar el comentario
# print(productos_vendidos)
# print(productos_no_vendidos)

# Variable auxiliar para los productos menos vendidos
productos_vendidos_menos = sorted(productos_vendidos, key = lambda x : x[1])

# Para visualizar el resultado quitar el comentario
# print(productos_vendidos_menos)

# Aquí creamos una variable que nos indicara solo el id del producto buscado

id_pbuscado = []

# Ciclo para ir iterando sobre las busquedas y solo guardar el id del producto
for busqueda in lifestore_searches:
    id_pbuscado.append(busqueda[1])

# Variable que muestra las busquedas de los productos, quitar comentario para visualizar
# print(id_pbuscado)

# Variable que guardara el nombre del producto y cuantas busquedas tuvo
busquedas_productos = []

# Hacemos un for anidado para obtener las busquedas de cada producto con su
# respectivo nombre
for producto in productos:
    # Nos ayudará a guardar el número de productos buscados
    contador = 0
    # Verifica que el producto no este ya en la lista de productos buscados con unidades buscadas
    if producto[0] not in busquedas_productos:
        # for que sirve para ver las coincidencias y asi saber cuantas unidades se buscaron
        for busqueda in id_pbuscado:
            # Condiconal para verificar que el id buscado sea igual al id del producto
            if producto[0] == busqueda:
                # Guardamos el número de unidades vendidas
                contador += 1
        # Hacemos una lista con el nombre del producto y las unidades vendidas
        lista_auxiliar = [producto[1], contador]
        # Añadimos la información anterior a una nueva lista
        busquedas_productos.append(lista_auxiliar)

# Para visualizar los productos buscados con su nombre, quitar el comentario de abajo
# print(busquedas_productos)


# Variables que clasifican en dos los productos, buscados y no buscados
productos_no_buscados = []
productos_buscados = []

# Ciclo para separar los productos dependiendo si tienen o no busquedas
for i in range(len(busquedas_productos)):
    # Condicional para los productos buscados
    if busquedas_productos[i][1] != 0:
        productos_buscados.append(busquedas_productos[i])
    # Condicional para los productos no buscados
    else:
        productos_no_buscados.append(busquedas_productos[i])

# Si queremos visualizar el resultado, hay que quitar los comentarios de abajo
# print(productos_buscados)
# print(productos_no_buscados)

# Separamos en una lista aparte los productos menos buscados
productos_menos_buscados = sorted(productos_buscados, key = lambda x : x[1])

# Si queremos ver el resultado hay que quitar el comentario de abajo
# print(productos_menos_buscados)


# Lista que guardara los productos de la categoría procesadores con sus respectivas ventas format
ventas_procesadores = []

# Ciclo que recorre todos los elementos de la categoría procesadores y los compara con la lista global de ventas
for procesador in procesadores:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if procesador == venta[0]:
            # Añadimos a la lista de ventas de procesadores el producto de dicha categoría más sus ventas
            ventas_procesadores.append([procesador, venta[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(ventas_procesadores)

# Lista que guardara los productos de la categoría tarjetas de video con sus respectivas ventas
ventas_tarjetas_video = []

# Ciclo que recorre todos los elementos de la categoría tarjetas de vídeo y los compara con la lista global de ventas
for tarjeta in tarjetas_video:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if tarjeta == venta[0]:
            # Añadimos a la lista de ventas de tarjetas de video el producto de dicha categoría más sus ventas
            ventas_tarjetas_video.append([tarjeta, venta[1]])

# En caso de querer visualizar el resultado de las operaciones anteriores, quitar el comentario de abajo
# print(ventas_tarjetas_video)

# Lista que guardará los productos de la categoría de tarjetas madre con sus respectivas ventas
ventas_tarjetas_madre = []

# Ciclo que recorre todos los elementos de la categoría tarjetas madre y los compara con la lista global de ventas
for tarjeta in tarjetas_madre:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if tarjeta == venta[0]:
            # Añadimos a la lista de ventas de tarjetas madre el producto de dicha categoría más sus ventas
            ventas_tarjetas_madre.append([tarjeta, venta[1]])

# En caso de querer visualizar el resultado de las operaciones anteriores, quitar el comentario de abajo
# print(ventas_tarjetas_madre)

# Lista que guardará los productos de la categoría de discos duros con sus respectivas ventas
ventas_discos_duros = []

# Ciclo que recorre todos los elementos de la categoría discos duros y los compara con la lista global de ventas
for disco in discos_duros:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if disco == venta[0]:
            # Añadimos a la lista de ventas de discos duros el producto de dicha categoría más sus ventas
            ventas_discos_duros.append([disco, venta[1]])

# En caso de querer visualizar el resultado de las operaciones anteriores, quitar el comentario de abajo
# print(ventas_discos_duros)

# Lista que guardará los productos de la categoría de memorias usb con sus respectivas ventas
ventas_memorias_usb = []

# Ciclo que recorre todos los elementos de la categoría memorias usb y los compara con la lista global de ventas
for memoria in memorias_usb:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if memoria == venta[0]:
            # Añadimos a la lista de ventas de memorias usb el producto de dicha categoría más sus ventas
            ventas_memorias_usb.append([memoria, venta[1]])

# En caso de querer visualizar el resultado de las operaciones anteriores, quitar el comentario de abajo
# print(ventas_memorias_usb)


# Lista que guardará los productos de la categoría de pantallas con sus respectivas ventas
ventas_pantallas = []

# Ciclo que recorre todos los elementos de la categoría pantallas y los compara con la lista global de ventas
for pantalla in pantallas:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if pantalla == venta[0]:
            # Añadimos a la lista de ventas de pantallas el producto de dicha categoría más sus ventas
            ventas_pantallas.append([pantalla, venta[1]])

# En caso de querer visualizar el resultado de las operaciones anteriores, quitar el comentario de abajo
# print(ventas_pantallas)


# Lista que guardará los productos de la categoría de bocinas con sus respectivas ventas
ventas_bocinas = []

# Ciclo que recorre todos los elementos de la categoría bocinas y los compara con la lista global de ventas
for bocina in bocinas:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if bocina == venta[0]:
            # Añadimos a la lista de ventas de bocinas el producto de dicha categoría más sus ventas
            ventas_bocinas.append([bocina, venta[1]])

# En caso de querer visualizar el resultado de las operaciones anteriores, quitar el comentario de abajo
# print(ventas_bocinas)



# Lista que guardará los productos de la categoría de audifonos con sus respectivas ventas
ventas_audifonos = []

# Ciclo que recorre todos los elementos de la categoría audifonos y los compara con la lista global de ventas
for audifono in audifonos:
    for venta in ventas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if audifono == venta[0]:
            # Añadimos a la lista de ventas de audifonos el producto de dicha categoría más sus ventas
            ventas_audifonos.append([audifono, venta[1]])

# En caso de querer visualizar el resultado de las operaciones anteriores, quitar el comentario de abajo
# print(ventas_audifonos)


# Ordenamos de mayores a menores ventas los productos de cada categoria
ventas_procesadores.sort(key = lambda x : x[1], reverse = True)
ventas_tarjetas_video.sort(key = lambda x : x[1], reverse = True)
ventas_tarjetas_madre.sort(key = lambda x : x[1], reverse = True)
ventas_discos_duros.sort(key = lambda x : x[1], reverse = True)
ventas_memorias_usb.sort(key = lambda x : x[1], reverse = True)
ventas_pantallas.sort(key = lambda x : x[1], reverse = True)
ventas_bocinas.sort(key = lambda x : x[1], reverse = True)
ventas_audifonos.sort(key = lambda x : x[1], reverse = True)


# Obtenemos a partir de un for el total de ventas para la categoria procesadores
# Variable que guardará el total de ventas en la categoría de procesadores
total_ventas_procesadores = 0
# Ciclo para guardar las ventas
for venta in ventas_procesadores:
    total_ventas_procesadores += venta[1]
# print(total_ventas_procesadores)


# Obtenemos a partir de un for el total de ventas para la categoria tarjetas de video
# Variable que guardará el total de ventas en la categoría de tarjetas de video
total_ventas_tarjetas_video = 0
# Ciclo para guardar las ventas
for venta in ventas_tarjetas_video:
    total_ventas_tarjetas_video += venta[1]
# print(total_ventas_tarjetas_video)


# Obtenemos a partir de un for el total de ventas para la categoria tarjetas madre
# Variable que guardará el total de ventas en la categoría de tarjetas madre
total_ventas_tarjetas_madre = 0
# Ciclo para guardar las ventas
for venta in ventas_tarjetas_madre:
    total_ventas_tarjetas_madre += venta[1]
# print(total_ventas_tarjetas_madre)


# Obtenemos a partir de un for el total de ventas para la categoria discos duros
# Variable que guardará el total de ventas en la categoría de discos duros
total_ventas_discos_duros = 0
# Ciclo para guardar las ventas
for venta in ventas_discos_duros:
    total_ventas_discos_duros += venta[1]
# print(total_ventas_discos_duros)


# Obtenemos a partir de un for el total de ventas para la categoria memorias usb
# Variable que guardará el total de ventas en la categoría de memorias usb
total_ventas_memorias_usb = 0
# Ciclo para guardar las ventas
for venta in ventas_memorias_usb:
    total_ventas_memorias_usb += venta[1]
# print(total_ventas_memorias_usb)


# Obtenemos a partir de un for el total de ventas para la categoria pantallas
# Variable que guardará el total de ventas en la categoría de pantallas
total_ventas_pantallas = 0
# Ciclo para guardar las ventas
for venta in ventas_pantallas:
    total_ventas_pantallas += venta[1]
# print(total_ventas_pantallas)


# Obtenemos a partir de un for el total de ventas para la categoria bocinas
# Variable que guardará el total de ventas en la categoría de bocinas
total_ventas_bocinas = 0
# Ciclo para guardar las ventas
for venta in ventas_bocinas:
    total_ventas_bocinas += venta[1]
# print(total_ventas_bocinas)


# Obtenemos a partir de un for el total de ventas para la categoria audifonos
# Variable que guardará el total de ventas en la categoría de audifonos
total_ventas_audifonos = 0
# Ciclo para guardar las ventas
for venta in ventas_audifonos:
    total_ventas_audifonos += venta[1]
# print(total_ventas_audifonos)


# Hacemos esta lista para guardar el nombre de la categoria y las ventas que tuvo
ventas_categorias = []

# Ciclo que itera sobre el nombre de todas las categorias y si hay coincidencias guarda el
# total de ventas de dicha categoria
for i in range(len(categorias)):
    if categorias[i] == "procesadores":
        ventas_categorias.append([categorias[i], total_ventas_procesadores])
    elif categorias[i] == "tarjetas de video":
        ventas_categorias.append([categorias[i], total_ventas_tarjetas_video])
    elif categorias[i] == "tarjetas madre":
        ventas_categorias.append([categorias[i], total_ventas_tarjetas_madre])
    elif categorias[i] == "discos duros":
        ventas_categorias.append([categorias[i], total_ventas_discos_duros])
    elif categorias[i] == "memorias usb":
        ventas_categorias.append([categorias[i], total_ventas_memorias_usb])
    elif categorias[i] == "pantallas":
        ventas_categorias.append([categorias[i], total_ventas_pantallas])
    elif categorias[i] == "bocinas":
        ventas_categorias.append([categorias[i], total_ventas_bocinas])
    elif categorias[i] == "audifonos":
        ventas_categorias.append([categorias[i], total_ventas_audifonos])

# Si queremos ver el resultado del ciclo anterior hay que descomentar la linea siguiente
# print(ventas_categorias)

ventas_categorias.sort(key = lambda x : x[1], reverse = True)


# Lista que guardará los productos de la categoría procesadores con sus búsquedas
busquedas_procesadores = []

# Ciclo que recorre todos los elementos de la categoría procesadores y los compara con la lista global de busquedas
for procesador in procesadores:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if procesador == busqueda[0]:
            # Añadimos a la lista de busquedas de procesadores el producto de dicha categoría más sus busquedas
            busquedas_procesadores.append([procesador, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(busquedas_procesadores) 


# Lista que guardará los productos de la categoría tarjetas de vídeo con sus búsquedas
busquedas_tarjetas_video = []

# Ciclo que recorre todos los elementos de la categoría tarjetas de vídeo y los compara con la lista global de busquedas
for tarjeta in tarjetas_video:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if tarjeta == busqueda[0]:
            # Añadimos a la lista de busquedas de tarjetas de vídeo el producto de dicha categoría más sus busquedas
            busquedas_tarjetas_video.append([tarjeta, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(busquedas_tarjetas_video) 


# Lista que guardará los productos de la categoría tarjetas madre con sus búsquedas
busquedas_tarjetas_madre = []

# Ciclo que recorre todos los elementos de la categoría tarjetas madre y los compara con la lista global de busquedas
for tarjeta in tarjetas_madre:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if tarjeta == busqueda[0]:
            # Añadimos a la lista de busquedas de tarjetas de madre el producto de dicha categoría más sus busquedas
            busquedas_tarjetas_madre.append([tarjeta, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(busquedas_tarjetas_madre) 


# Lista que guardará los productos de la categoría discos duros con sus búsquedas
busquedas_discos_duros = []

# Ciclo que recorre todos los elementos de la categoría discos duros y los compara con la lista global de busquedas
for disco in discos_duros:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if disco == busqueda[0]:
            # Añadimos a la lista de busquedas de discos duros el producto de dicha categoría más sus busquedas
            busquedas_discos_duros.append([disco, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(busquedas_discos_duros) 


# Lista que guardará los productos de la categoría memorias usb con sus búsquedas
busquedas_memorias_usb = []

# Ciclo que recorre todos los elementos de la categoría memorias usb y los compara con la lista global de busquedas
for memoria in memorias_usb:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if memoria == busqueda[0]:
            # Añadimos a la lista de busquedas de memorias usb el producto de dicha categoría más sus busquedas
            busquedas_memorias_usb.append([memoria, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(busquedas_memorias_usb)


# Lista que guardará los productos de la categoría pantallas con sus búsquedas
busquedas_pantallas = []

# Ciclo que recorre todos los elementos de la categoría pantallas y los compara con la lista global de busquedas
for pantalla in pantallas:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if pantalla == busqueda[0]:
            # Añadimos a la lista de busquedas de pantallas el producto de dicha categoría más sus busquedas
            busquedas_pantallas.append([pantalla, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(busquedas_pantallas)


# Lista que guardará los productos de la categoría bocinas con sus búsquedas
busquedas_bocinas = []

# Ciclo que recorre todos los elementos de la categoría bocinas y los compara con la lista global de busquedas
for bocina in bocinas:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if bocina == busqueda[0]:
            # Añadimos a la lista de busquedas de bocinas el producto de dicha categoría más sus busquedas
            busquedas_bocinas.append([bocina, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
#print(busquedas_bocinas)


# Lista que guardará los productos de la categoría audífonos con sus búsquedas
busquedas_audifonos = []

# Ciclo que recorre todos los elementos de la categoría audífonos y los compara con la lista global de busquedas
for audifono in audifonos:
    for busqueda in busquedas_productos:
        # Condicional para comparar si el nombre de dos productos es el mismo
        if audifono == busqueda[0]:
            # Añadimos a la lista de busquedas de bocinas el producto de dicha categoría más sus busquedas
            busquedas_audifonos.append([audifono, busqueda[1]])
            
# En caso de querer ver el resultado de la operación anterior quitar el comentario de abajo            
# print(busquedas_audifonos) 


# Ordenas todas las listas de busquedas por categorias para obtener entonces una lista ordenada de mayor a menor

busquedas_procesadores.sort(key = lambda x : x[1], reverse = True)
busquedas_tarjetas_video.sort(key = lambda x : x[1], reverse = True)
busquedas_tarjetas_madre.sort(key = lambda x : x[1], reverse = True)
busquedas_discos_duros.sort(key = lambda x : x[1], reverse = True)
busquedas_memorias_usb.sort(key = lambda x : x[1], reverse = True)
busquedas_pantallas.sort(key = lambda x : x[1], reverse = True)
busquedas_bocinas.sort(key = lambda x : x[1], reverse = True)
busquedas_audifonos.sort(key = lambda x : x[1], reverse = True)


# Ahora lo que haremos será separar las búsquedas totales por categoría

# Variable que guardará el total de las búsquedas en la categoría de procesadores
total_busquedas_procesadores = 0

# Ciclo que suma todas las busquedas de la categoría procesadores
for busqueda in busquedas_procesadores:
    total_busquedas_procesadores += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_procesadores)


# Variable que guardará el total de las búsquedas en la categoría de tarjetas de vídeo
total_busquedas_tarjetas_video = 0

# Ciclo que suma todas las busquedas de la categoría tarjetas de vídeo
for busqueda in busquedas_tarjetas_video:
    total_busquedas_tarjetas_video += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_tarjetas_video)


# Variable que guardará el total de las búsquedas en la categoría de tarjetas madre
total_busquedas_tarjetas_madre = 0

# Ciclo que suma todas las busquedas de la categoría tarjetas madre
for busqueda in busquedas_tarjetas_madre:
    total_busquedas_tarjetas_madre += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_tarjetas_madre)


# Variable que guardará el total de las búsquedas en la categoría de discos duros
total_busquedas_discos_duros= 0

# Ciclo que suma todas las busquedas de la categoría discos duros
for busqueda in busquedas_discos_duros:
    total_busquedas_discos_duros += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_discos_duros)


# Variable que guardará el total de las búsquedas en la categoría de memorias usb
total_busquedas_memorias_usb = 0

# Ciclo que suma todas las busquedas de la categoría memorias usb
for busqueda in busquedas_memorias_usb:
    total_busquedas_memorias_usb += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_memorias_usb)


# Variable que guardará el total de las búsquedas en la categoría de pantallas
total_busquedas_pantallas = 0

# Ciclo que suma todas las busquedas de la categoría pantallas
for busqueda in busquedas_pantallas:
    total_busquedas_pantallas += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_pantallas)


# Variable que guardará el total de las búsquedas en la categoría de bocinas
total_busquedas_bocinas = 0

# Ciclo que suma todas las busquedas de la categoría bocinas
for busqueda in busquedas_bocinas:
    total_busquedas_bocinas += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_bocinas)


# Variable que guardará el total de las búsquedas en la categoría de audifonos
total_busquedas_audifonos = 0

# Ciclo que suma todas las busquedas de la categoría audifonos
for busqueda in busquedas_audifonos:
    total_busquedas_audifonos += busqueda[1]
    
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(total_busquedas_audifonos)


# Con las variables de busquedas por categorías haremos ahora un ciclo para rellenar una lista
# que guarde el nombre de la categoría y su total de búsquedas

# Variable que guardará lo anteriormente escrito
busquedas_categorias = []

for categoria in categorias:
    if categoria == "procesadores":
        busquedas_categorias.append([categoria, total_busquedas_procesadores])
    elif categoria == "tarjetas de video":
        busquedas_categorias.append([categoria, total_busquedas_tarjetas_video])
    elif categoria == "tarjetas madre":
        busquedas_categorias.append([categoria, total_busquedas_tarjetas_madre])
    elif categoria == "discos duros":
        busquedas_categorias.append([categoria, total_busquedas_discos_duros])
    elif categoria == "memorias usb":
        busquedas_categorias.append([categoria, total_busquedas_memorias_usb])
    elif categoria == "pantallas":
        busquedas_categorias.append([categoria, total_busquedas_pantallas])
    elif categoria == "bocinas":
        busquedas_categorias.append([categoria, total_busquedas_bocinas])
    elif categoria == "audifonos":
        busquedas_categorias.append([categoria, total_busquedas_audifonos])
        
# Ahora ordenamos las busquedas de mayor a menor

busquedas_categorias.sort(key = lambda x : x[1], reverse = True)

# print(busquedas_categorias)

# Aquí lo que haremos será crear una lista que tenga el promedio de reseñas de cada producto

promedio_resenas = []

# Vamos a obtener de la lista lifestore sales unicamente el id del producto y su reseña promedi

id_resena = []

# Con este ciclo vamos a obtener el id y la reseña que tuvo cada venta
for venta in lifestore_sales:
    # Con este Slicing obtenemos los datos que necesitamos que es el id y su calificación
    id_resena.append(venta[1:3])
    
# Si queremos visualizar el resultado del proceso anterior hay que quitar el comentario de abajo
# print(id_resena)

# Ahora vamos a rellenar la lista promedio resenas, con la ayuda de la lista de productos
for producto in lifestore_products:
    # Variable que se reinicia cada que revisamos un id distinto y guarda las calificaciones que haya de ese id
    calificacion_acumulada = 0
    # Variable que se reinicia igual cada ves que revisamos un id distinto y guarda el número de calificaciones de dicho producto
    numero_resenas = 0
    # For para recorrer toda la lista de reseñas
    for resena in id_resena:
        # Condicional que verifica que en la lista de reseñas coincidan los id
        if producto[0] == resena[0]:
            # Manera de ir acumulando el valor total de las reseñas y el número de reseñas
            calificacion_acumulada += resena[1]
            numero_resenas += 1
    # Al acabar la iteracion en la lista de reseñas vemos que en el id en el que estemos no haya sido ya evaluado antes
    if producto[0] not in promedio_resenas:
        
        # Condicional que sirve para evitar divisiones entre 0, para el caso de que un producto no tenga reseñas
        if numero_resenas != 0:
            # Instruccion que agrega a la losta de promedio_reseñas una lista cuyos elementos son el nombre del producto y su calificación de reseñas promedio
            promedio_resenas.append([producto[1], "{0:.2f}".format(calificacion_acumulada / numero_resenas)])
        # Condicional para cuando un producto no tiene reseñas
        else:
            # Agregamos a la lista de reseñas el nombre del producto y que tiene 0 reseñas
            promedio_resenas.append([producto[1], 0])

# Si queremos ver la lista con los resultados, hay que quitar el resultado de abajo
# print(promedio_resenas)

# Ahora vamos a seperar las reseñas en las que si tienen y los que no tienen

# Lista para productos con reseñas
productos_mejores_resenas = []

# Lista para los productos sin resenas
productos_sin_resenas = []

# Ciclo para iterar sobre todos los productos con sus reseñas
for promedio in promedio_resenas:
    # Condicional para separar a los productos que si tienen reseñas
    if promedio[1] != 0:
        productos_mejores_resenas.append([promedio[0], float(promedio[1])])
    # Condicional para separar a los productos que no tienen reseñas
    else:
        productos_sin_resenas.append([promedio[0], float(promedio[1])])
            
# Si queremos visualizar los resultados del ciclo anterior quitar los comentarios

# print(productos_mejores_resenas)
# print(productos_sin_resenas)

# Ordenamos los productos con reseñas para elegir a los mejores y a los peores

productos_mejores_resenas.sort(key = lambda x : x[1], reverse = True)
productos_peores_resenas = sorted(productos_mejores_resenas, key = lambda x : x[1])
productos_sin_resenas.sort(key = lambda x : x[0])

# Si queremos visualizar los resultados finales descomentamos las siguientes 3 lineas
# print(productos_mejores_resenas)
# print(productos_peores_resenas)
# print(productos_sin_resenas)



# En esta parte creamos una lista para obtener los productos devueltos

# Variable que guardrá los productos devueltos
devoluciones = []

# Ciclo que itera sobre todas las ventas
for venta in lifestore_sales:
    # Condicional para verificar si un producto es devuelto o no
    if venta[4] == 1:
        # Agregamos los id de los productos devueltos
        devoluciones.append(venta[1])

# Si queremos visualizar el resultado del ciclo anterior, quitar el comentario de abajo
# print(devoluciones)

# Lista que guardará listas con el id del producto y las veces que se devolvio
productos_devueltos = []

# Ciclo para iterar sobre los objetos devueltos
for producto in lifestore_products:
    # Variable que guardará el número de devoluciones
    contador = 0
    # Ciclo para iterar sobre todas las devoluciones
    for devolucion in devoluciones:
            # Condicional para verificar que coinciden los id de producto devuelto y nombre
            if producto[0] == devolucion:
                contador += 1
    # Agregamos a la lista una lista con el nombre del producto y las veces que fue devuelto
    productos_devueltos.append([producto[1], contador])

# Si queremos ver el resultado del ciclo anterior, quitar el comentario de abajo
# print(productos_devueltos)



# Vemos cuales productos si fueron devueltos
productos_si_devueltos = []

# Ciclo para iterar sobre toda la lista de productos devueltos
for producto in productos_devueltos:
    # Condicional para separar los productos entre si devueltos y no devueltos
    if producto[1] != 0:
        # Agregamos a la lista un lista con el nombre del producto y el número de veces que fue devuelto
        productos_si_devueltos.append(producto)
        
# Si queremos visualizar el resultado anterior quitar el comentario de abajo
# print(productos_si_devueltos)

# Ordenamos los productos del más devuelto al menos devuelto

productos_si_devueltos.sort(key = lambda x : x[1], reverse = True)


# En esta parte obtendremos puros números para reportar los ingresos

# Vemos los años que hay en la base
anios = []

for venta in lifestore_sales:
    if venta[3][6:10] not in anios:
        anios.append(venta[3][6:10])
        
# Para visualizar los años que hay en la base quitar el comentario de abajo
# print(anios)


# Variables que guardaran las ventas por los respectivos meses y años
anio2002 = []
anio2019 = []
enero = []
febrero = []
marzo = []
abril = []
mayo = []
junio = []
julio = []
agosto = []
septiembre = []
octubre = []
noviembre = []
diciembre = []
errores = []

# Ciclo para iterar en cada venta y ver en la fecha a que año pertenecen
for venta in lifestore_sales:
    # Condicional para validar por año
    if venta[3][6:10] == "2020":
        # Condicionales para validar por meses
        if venta[3][3:5] == "01":
            enero.append(venta[1])
        elif venta[3][3:5] == "02":
            febrero.append(venta[1])
        elif venta[3][3:5] == "03":
            marzo.append(venta[1])
        elif venta[3][3:5] == "04":
            abril.append(venta[1])
        elif venta[3][3:5] == "05":
            mayo.append(venta[1])
        elif venta[3][3:5] == "06":
            junio.append(venta[1])
        elif venta[3][3:5] == "07":
            julio.append(venta[1])
        elif venta[3][3:5] == "08":
            agosto.append(venta[1])
        elif venta[3][3:5] == "09":
            septiembre.append(venta[1])
        elif venta[3][3:5] == "10":
            octubre.append(venta[1])
        elif venta[3][3:5] == "11":
            noviembre.append(venta[1])
        elif venta[3][3:5] == "11":
            diciembre.append(venta[1])
        else:
            # Condicional por si hay errores
            errores.append(venta[3])
    # Condicional para validar por año 
    elif venta[3][6:10] == "2019":
        anio2019.append(venta[1])
    # Condicional para validar por año
    elif venta[3][6:10] == "2002":
        anio2002.append(venta[1])
    # Condicional por si hay errores
    else:
        errores.append(venta[3])

# Para visualizar el resultado de los ciclos anteriores, descomentar el código de abajo
# print(enero)
# print(febrero)
# print(marzo)
# print(abril)
# print(mayo)
# print(junio)
# print(julio)
# print(agosto)
# print(septiembre)
# print(octubre)
# print(noviembre)
# print(diciembre)
# print(anio_2002)
# print(anio_2019)
# print(errores)

# Obtenemos o hacemos una lista con todos los meses y sus ventas

ventas_mensuales_2020 = [["enero", int(len(enero))],["febrero",int(len(febrero))],["marzo", int(len(marzo))],
                         ["abril", int(len(abril))],["mayo", int(len(mayo))],["junio", int(len(junio))],["julio", int(len(julio))],
                         ["agosto", int(len(agosto))],["septiembre", int(len(septiembre))]]

# Si queremos ver la lista quitamos el comentario de abajo
# print(ventas_mensuales_2020)

# Hacemos las ventas promedio mensuales del 2020
# Variable para guardar el promedio
suma = 0

for i in range(len(ventas_mensuales_2020)):
    suma += ventas_mensuales_2020[i][1]

# Obtenemos el promedio de ventas mensuales
ventas_promedio_mensuales = suma/len(ventas_mensuales_2020)
# Redondeamos a 2 decímales
# print("{0:.2f}".format(ventas_promedio_mensuales))




# Obtengamos el ingreso por mes
# Creamos lista con el ingreso por mes
ingreso_enero = 0
ingreso_febrero = 0
ingreso_marzo = 0
ingreso_abril = 0
ingreso_mayo = 0
ingreso_junio = 0
ingreso_julio = 0
ingreso_agosto = 0
ingreso_septiembre = 0
ingreso_octubre = 0
ingreso_noviembre = 0
ingreso_diciembre = 0
ingreso2002 = 0
ingreso2019 = 0

# Hacemos un for que compare las listas de las ventas de ese mes a través del id y luego sume su precio
# Para lo anterior necesitamos las variables auxiliares que guardaran el valor del ingreso en ese mes

# Al ser muy repetitivo el método para obtener los ingresos por mes, comentaré solo para el primero
# El razonamiento para los demás meses es análogo al de a continuación

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in enero:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_enero += producto[2]
            
# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in febrero:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_febrero += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in marzo:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_marzo += producto[2]
            
# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in abril:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_abril += producto[2]
            
# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in mayo:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_mayo += producto[2]
            
# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in junio:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_junio += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in julio:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_julio += producto[2]
            
# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in agosto:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_agosto += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in septiembre:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_septiembre += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in octubre:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_octubre += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in noviembre:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_noviembre += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in diciembre:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso_diciembre += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in anio2002:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso2002 += producto[2]

# Ciclo que recorre todas las ventas en el mes correspondiente
for venta in anio2019:
    # Recorremos toda la lista de los productos
    for producto in lifestore_products:
        # Comparamos que los id coincidan
        if venta == producto[0]:
            # Vamos sumando los precios para que se acumule un total
            ingreso2019 += producto[2]
            
# Para visualizar los resultados anteriores quitar el comentario de abajo

# print(ingreso_enero)
# print(ingreso_febrero)
# print(ingreso_marzo)
# print(ingreso_abril)
# print(ingreso_mayo)
# print(ingreso_junio)
# print(ingreso_julio)
# print(ingreso_agosto)
# print(ingreso_septiembre)
# print(ingreso_octubre)
# print(ingreso_noviembre)
# print(ingreso_diciembre)
# print(ingreso2002)
# print(ingreso2019)

# Hacemos una lista con cada mes y su ingreso

ingreso_mensual_2020 = [["enero", ingreso_enero], ["febrero", ingreso_febrero], ["marzo", ingreso_marzo],
                   ["abril", ingreso_abril], ["mayo", ingreso_mayo], ["junio", ingreso_junio],
                   ["julio", ingreso_julio], ["agosto", ingreso_agosto], ["septiembre", ingreso_septiembre]]


# Si queremos visualizar el resultado quitamos el comentario de abajo
# print(ingreso_mensual_2020)

# Hacemos el ingreso en lo que llevamos del año
# Variable que guardara la suma de todos los ingresos de la lista ingresos mensuales
ingreso2020 = 0

# Ciclo para recorrer todos los ingresos de la lista ingresos mensuales
for ingreso in ingreso_mensual_2020:
    # Suma que va guardando la suma de los valores anteriores
    ingreso2020 += ingreso[1]

# Hacemos el ingreso promedio por mes
suma2 = 0

for i in range(len(ingreso_mensual_2020)):
    suma2 += ingreso_mensual_2020[i][1]
    
ingreso_promedio_mensual_2020 = suma2 / len(ingreso_mensual_2020)

# Imprimimos el resultado anterior si queremos
# print("{0:.2f}".format(ingreso_promedio_mensual_2020))

# Ahora obtendremos el ingreso por categorias

# Creamos variables donde se guardaran los ingresos de cada categoría
ingreso_procesadores = 0
ingreso_tarjetas_video = 0
ingreso_tarjetas_madre = 0
ingreso_discos_duros = 0
ingreso_memorias_usb = 0
ingreso_pantallas = 0
ingreso_bocinas = 0
ingreso_audifonos = 0

# Hacemos un ciclo para iterar sobre las ventas por categoría

# Iteramos sobre las ventas de dicha categoría
for venta in ventas_procesadores:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_procesadores += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_procesadores)


# Iteramos sobre las ventas de dicha categoría
for venta in ventas_tarjetas_video:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_tarjetas_video += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_tarjetas_video)


# Iteramos sobre las ventas de dicha categoría
for venta in ventas_tarjetas_madre:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_tarjetas_madre += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_tarjetas_madre)


# Iteramos sobre las ventas de dicha categoría
for venta in ventas_discos_duros:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_discos_duros += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_discos_duros)


# Iteramos sobre las ventas de dicha categoría
for venta in ventas_memorias_usb:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_memorias_usb += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_memorias_usb)


# Iteramos sobre las ventas de dicha categoría
for venta in ventas_pantallas:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_pantallas += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_pantallas)


# Iteramos sobre las ventas de dicha categoría
for venta in ventas_bocinas:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_bocinas += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_bocinas)


# Iteramos sobre las ventas de dicha categoría
for venta in ventas_audifonos:
    # Iteramos sobre los productos para obtener su precio
    for producto in lifestore_products:
        # Condicionamos para que los nombres de los productos sean iguales
        if producto[1] == venta[0]:
            # Multiplicamos unidades vendidas por su precio y lo vamos guardando
            ingreso_audifonos += (producto[2] * venta[1])
            
# Si queremos ver el resultado anterior quitamos el comentario de abajo
# print(ingreso_audifonos)

# Hacemos una lista con cada categoria y su ingreso

ingreso_categorias = [["procesadores", ingreso_procesadores], ["tarjetas de vídeo", ingreso_tarjetas_video],
                      ["tarjetas madre", ingreso_tarjetas_madre], ["discos duros", ingreso_discos_duros],
                      ["memorias USB", ingreso_memorias_usb], ["pantallas", ingreso_pantallas], ["bocinas", ingreso_bocinas],
                      ["audífonos", ingreso_audifonos]]


# Si queremos visualizar el resultado, quitamos el comentario de abajo
# print(ingreso_categorias)

# Verificamos que el ingreso por categorias, sea igual al ingreso de los 3 años
ingreso_total_categorias = 0

for ingreso in ingreso_categorias:
    ingreso_total_categorias += ingreso[1]
    
# Verificamos el resultado pero hay que quitar el comentario
# print(ingreso_total_categorias == ingreso2020 + ingreso2019 + ingreso2002)

ingreso_categorias.sort(key = lambda x : x[1], reverse = True)





















"""
AQUI EMPEZAMOS EL LOG IN Y LA INTERFAZ CON EL USUARIO
"""





# Con esta variable controlamos el inicio de sesion
condicion_general = True


# Bucle que controla la interfaz en general, al salir se acaba el programa
while condicion_general == True:
    
    
    print("╔══════════════════════════════════╗")
    print("║      ¡Bienvenido a Lifestore!    ║")
    print("╚══════════════════════════════════╝")
    
    # Advertencia para los usuarios que usan la "app" por primera vez
    print("Si no tienes usuario, por favor pídele al administrador que te cree uno")
      
    
    # Le damos opciones al usuario/administrador
    opciones_menu = input('¿Qué deseas hacer?\nEscoge un número por favor\n1.-Iniciar sesión como usuario\n2.-Iniciar sesión como administrador\n3.-Salir\n\nOpción: ')
    


    # Opcion para iniciar sesion con el usuario
    if opciones_menu == "1":
        # Variable que controla el while para el verificar usuario y/o contraseña
        contador = 0
        # Bucle que controla el inicion de sesion
        while contador <= 2:
            # Variable que guarda el nombre que el usuario tenga
            nombre_usuario = input("Ingresa el nombre de usuario: ")
            # Variable que guarda la contrasena
            contrasena_usuario = input("Ingresa la contraseña: ")
            
            # Esta variable controlara que se revisen todos los usuarios en la lista de usuarios
            verificar_usuarios = 1
            
            # Aqui vamos iterando usuario por usuario y contrasena por contrasena
            for usuario in usuarios:
                # Verificamos que los datos sean correctos de acuerdo a la lista de usuarios
                if usuario[0] == nombre_usuario and usuario[1] == contrasena_usuario:
                    # Acciones si todo lo anterior fue correcto
                    
                    # Mensaje de que el log in fue correcto
                    print("\n¡Bienvenido querido usuario!\n")
                    
                    # Variable que toma el control de flujo de las decisiones del usuario
                    decision = True
                    
                    # Bucle para controlar las decisiones del usuario
                    while decision:
                        # Mensaje para mostrar opciones al usuario
                        print("¿Qué deseas hacer?\n1.- Ver categorías\n2.- Ver productos por categoría\n3.- Buscar producto\n4.- Cerrar sesión")
                        
                        # Sirve para que el usuario escoga una opcion
                        opcion_usuario = input("Escoge un número: ")
                        
                        # Condicional para acceder a la opcion 1
                        if opcion_usuario == "1":
                            
                            # Mostramos las categorias al usuario
                            print("\nLas categorías son:")
                            
                            # Imprimimos la lista de forma agradable
                            
                            # El for sirve para numerar las categorias
                            for i in range(len(categorias)):
                                
                                # Hacemos lista
                                print(i+1,".-",categorias[i])
                            
                            # Variable para guardar la decision del usuario para volver a tomar una opcion     
                            decision_nueva = input("¿Quieres hacer otra cosa?(s/n): ")
                            
                            # Condicion para validar la instrucción si
                            if decision_nueva == "s":
                                
                                # Rompe la iteracion del for para ir al while
                                continue
                            
                            # Opcion para salir del while de las opciones del usuario y del while del inicio de sesion
                            elif decision_nueva == "n":
                                
                                # Mensaje para avisar al usuario que regresa al menu
                                print("\nGracias, nos vemos pronto\n")
                                
                                # Modificacion de la variable de control del while para las opciones del usuario
                                decision = False
                                
                                # Modificacion de la variable de control del while para el inicio de sesion
                                contador = 3
                            
                            # Condicion para repetir la accion
                            else:
                                print("\nDecisión no válida, regresando a las opciones de usuario\n")
                                
                        # Condicion para validar la opcion 2
                        elif opcion_usuario == "2":
                            # Variable que guarda la categoria para posteriormente visualizar sus productos
                            productos_categoria = input("¿De qué categoría quieres ver los productos? ")
                            
                            # Condicional para validar la categoria
                            if productos_categoria in categorias:
                                # Condicional para validar la categoria de procesadores
                                if productos_categoria == "procesadores":
                                    # print para mostrar el mensaje de los productos de la categoria procesadores
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria procesadores
                                    for i in range(len(procesadores)):
                                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", procesadores[i])
                                        
                                # Condicional para validar la categoria de tarjetas de video
                                elif productos_categoria == "tarjetas de video":
                                    # print para mostrar el mensaje de los productos de la categoria tarjetas de video
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria tarjetas de video
                                    for i in range(len(tarjetas_video)):
                                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", tarjetas_video[i])
                                        
                                # Condicional para validar la categoria de tarjetas madre
                                elif productos_categoria == "tarjetas madre":
                                    # print para mostrar el mensaje de los productos de la categoria tarjetas madre
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria tarjetas madre
                                    for i in range(len(tarjetas_madre)):
                                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", tarjetas_madre[i])
                                        
                                # Condicional para validar la categoria de discos duros
                                elif productos_categoria == "discos duros":
                                    # print para mostrar el mensaje de los productos de la categoria discos duros
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria discos duros
                                    for i in range(len(discos_duros)):
                                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", discos_duros[i])
                                    
                                # Condicional para validar la categoria de memorias usb
                                elif productos_categoria == "memorias usb":
                                    # print para mostrar el mensaje de los productos de la categoria memorias usb
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria memorias usb
                                    for i in range(len(memorias_usb)):
                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", memorias_usb[i])
                                
                                # Condicional para validar la categoria de pantallas
                                elif productos_categoria == "pantallas":
                                    # print para mostrar el mensaje de los productos de la categoria pantallas
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria pantallas
                                    for i in range(len(pantallas)):
                                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", pantallas[i])
                                   
                                    
                                # Condicional para validar la categoria de bocinas
                                elif productos_categoria == "bocinas":
                                    # print para mostrar el mensaje de los productos de la categoria bocinas
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria bocinas
                                    for i in range(len(bocinas)):
                                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", bocinas[i])
                                    
                                # Condicional para validar la categoria audifonos
                                elif productos_categoria == "audifonos":
                                # print para mostrar el mensaje de los productos de la categoria audifonos
                                    print("\nEstos son los productos de " + productos_categoria + " :")
                                    # Ciclo para mostrar los productos en forma de lista de la categoria audifonos
                                    for i in range(len(audifonos)):
                                        
                                        # Mostrar productos en forma de lista
                                        print(i+1, ".- ", audifonos[i])
                                        
                            # Condicional para validar que la categoria esta mal
                            else:
                                # Mensaje que dice que la categoria no existe
                                print("Categoría no existente, revise las categorías por favor")
                                
                            # Variable para guardar la decision del usuario para volver a tomar una opcion
                            decision_nueva = input("¿Quieres hacer otra cosa?(s/n): ")
                            
                            # Condicional para validar la opcion si
                            if decision_nueva == "s":
                                # Rompe la iteracion del for para pasar al while de las opciones del usuario
                                continue
                            
                            # Condicional para regresar al menu principal (validar la opcion no)
                            elif decision_nueva == "n":
                                # Mensaje para anunciar la decision
                                print("\nGracias, nos vemos pronto\n")
                                
                                # Modificacion de la variable de control del while para las opciones del usuario
                                decision = False
                                
                                # Modificacion de la variable de control del while para el inicio de sesion
                                contador = 3
                            
                            # Conidicion para regresar a la opcion 2
                            else:
                                # Mensaje de error
                                print("\nDecisión no válida, regresando a las opciones de usuario\n")
                                
                        # Condicion para validar la opcion 3
                        elif opcion_usuario == "3":
                            # Variable que guarda el producto que se desea buscar
                            busqueda_producto = input("Ingresa el nombre del producto a buscar: ")
                            
                            # Condicional para saber si un producto esta en la lista de productos
                            if busqueda_producto in productos:
                                # Ciclo para imprimir los datos del producto mostrado
                                for producto in lifestore_products:
                                    # Condicional para imprimir los datos del producto buscado
                                    if producto[1] == busqueda_producto:
                                        # Mostrar el nombre del producto buscado
                                        print("\nTu producto buscado es: ", producto[1])
                                        # Mostrar el precio del producto
                                        print("El precio es: ", producto[2])
                                        # Mostrar el numero de productos en existencia
                                        print("Tenemos ", producto[4], " en existencia")
                                    # Condicional para romper el ciclo for y no imprimir todos los productos
                                    else:
                                        continue
                            # Condicion que funciona si un producto no esta en la lista de productas        
                            else:
                                # Mensaje que avisa al usuario que su producto no se ha encontrado
                                print("\nProducto no existente, revise los productos por categoría por favor")
                                
                            # Variable para guardar la decision del usuario para volver a tomar una opcion     
                            decision_nueva = input("¿Quieres hacer otra cosa?(s/n): ")
                            
                            # Condicion para validar la instrucción si
                            if decision_nueva == "s":
                                
                                # Rompe la iteracion del for para ir al while
                                continue
                            
                            # Opcion para salir del while de las opciones del usuario y del while del inicio de sesion
                            elif decision_nueva == "n":
                                
                                # Mensaje para avisar al usuario que regresa al menu
                                print("\nGracias, nos vemos pronto\n")
                                
                                # Modificacion de la variable de control del while para las opciones del usuario
                                decision = False
                                
                                # Modificacion de la variable de control del while para el inicio de sesion
                                contador = 3
                            # Conidicion para regresar a la opcion 3
                            else:
                                # Mensaje de error
                                print("\nDecisión no válida, regresando a las opciones de usuario\n")
                                
                        # Condicional para acceder a la opcion 4
                        elif opcion_usuario == "4":
                            
                            # Mensaje de despedida para el usuario
                            print("\nGracias, volviendo al menú principal\n")
                            
                            # Modificacion del valor de la variable de control del while para las opciones del usuario
                            decision = False
                            
                            # Modificacion del valor de la variable de control del while para el inicio de sesion
                            contador = 3
                        
                        
                        # Condicion cuando una opcion no es valida
                        else:
                            # Mensaje de advertencia al usuario para una opcion no validad
                            print("\nPon una opción válida por favor\n")
                    
                    
                    
                    # Controla el flujo general de la sesion iniciada
                    contador = 3
                    
                    # Se rompe el while para ya no pedir mas usuario y contrasena
                    break  
                
                # Este else es muy importante pues por iteracion guardara cuantas veces el usuario y/o contraseña estan mal
                else:
                    verificar_usuarios += 1
                    
                    
                    
            # Esta condicion sirve para saber si el ciclo for para verificar los usuarios ya reviso todos los elementos
            # de la lista usuarios y en caso de ser asi, mandar un mensaje de que el usuario y/o la contraseña son incorrectos
            if verificar_usuarios == len(usuarios) + 1:
                
                # Este contador se aumenta en uno para controlar el numero de intentos que tiene el usuario para iniciar sesion
                contador += 1
                # Mensaje de que el usuario se equivoco en el inicio de sesion
                print("\nContraseña y/o usuarios incorrectos, intente nuevamente")
                
                # Condicional para saber si le quedan intentos al usuario
                if contador < 3:
                    # Mensaje que muestra cuantos intentos le quedan al usuario
                    print("Te quedan ", 3 - contador, " intentos")
                    
                # Condicional para saber que el usuario llego al limite de intentos
                elif contador == 3:
                    # Mensaje al usuario de que se acabaron sus intentos para iniciar sesion
                    print("\nSe acabaron los intentos, intente nuevamente más tarde\n")
                
    
    
    
    
    
    
    # Opcion para iniciar sesion con el administrador
    elif opciones_menu == "2":
        # Variable de contro del bucle para verificar usuario y contraseña
        contador2 = 0
        
        
        # Bucle para iniciar sesion como administrador
        while contador2 <=2:    
            # Variable para guardar el nombre del administrador que el usuario ingrese
            nombre_administrador = input("Ingresa el nombre del administrador: ")
            # Variable para guardar la contraseña del administrador que el usuario ingrese
            contrasena_administrador = input("Ingresa la contraseña: ")    
            # Variable para que todos los administradores sean verificados
            verificar_administrador = 1
            
            
            # Bucle for para recorrer toda la lista de administradores en busca de coincidencias
            for administrador in administradores:
                # Condicional para verificar que los datos proporcionados son correctos
                if administrador[0] == nombre_administrador and administrador[1] == contrasena_administrador:
                    # Variable que indica que el inicio de sesión fue éxitoso
                    print("\nBienvenido administrador: " + nombre_administrador +"\n")
                    
                    # Variable que controla el flujo del while
                    decision2 = True
                    # Bucle while que sirve para ofrecerle decisiones al administrador y se detiene con la opcion salir
                    while decision2:
                    
                        
                    # Mensaje para darle opciones al administrador de que hacer
                        print("¿Qué deseas hacer " + nombre_administrador + "?\n")
                        print("1.- Administrar usuarios\n2.- Obtener reportes\n3.- Cerrar sesión")
                    
                        # Variable que guarda la decision del administrador
                        opcion_administrador = input("Escoge un número: ")
                    
                    
                    
                    
                        # Condicional para validar si el administrador escogio la opcion 1 
                        if opcion_administrador == "1":
                            
                            # Mensaje que le indica al administrador que puede hacer en la opcion 1
                            print("\nPuedes hacer lo siguiente " + nombre_administrador)
                            
                            # Opciones que existen para la administracion de usuarios
                            print("\n1.- Ver usuarios\n2.- Crear usuarios\n3.- Borrar usuarios")
                            # Variable para guardar la decisión del administrador en cuanto a los usuarios
                            eleccion = input("Escoge un número: ")
                            
                            # Condicional que sirve para ver los usuarios
                            if eleccion == "1":
                                
                                # Condicional para verificar si existen usuarios en la base de datos de los usuarios
                                if len(usuarios) != 0:
                                    # Mensaje que muestra los usuarios que hay
                                    print("\nLos usuarios existentes son:\n")
                                    # For para mostrar usuario por usuario con su respectiva contraseña
                                    for i in range(len(usuarios)):
                                        # Muestra el nombre del usuario
                                        print(1+i,".-Nombre de usuario:  " + usuarios[i][0])
                                        # Muestra la contraseña del usuario
                                        print("    Contraseña: " + usuarios[i][1])
                                # Condicional que sirve para el caso en el que no existan usuarios
                                else:
                                    # Mensaje de alerta para decirle al administrados que no hay usuarios
                                    print("No hay ningún usuario registrado")
                                    
                                # Variable para guardar la decision del administrador para volver a tomar una opcion
                                decision_nueva = input("¿Quieres hacer otra cosa?(s/n): ")
                            
                                # Condicional para validar la opcion si
                                if decision_nueva == "s":
                                    # Rompe la iteracion del for para pasar al while de las opciones del administrador
                                    continue
                            
                                # Condicional para regresar al menu principal (validar la opcion no)
                                elif decision_nueva == "n":
                                    # Mensaje para anunciar la decision
                                    print("\nGracias, nos vemos pronto\n")
                                    # Modificacion de la variable de control del while para las opciones del administrador
                                    decision2 = False
                                    # Modificacion de la variable de control del while para el inicio de sesion
                                    contador2 = 3
                                    
                                
                                # Condicional en el caso de que la opción del administrador no exista
                                else:
                                # Mensaje de error
                                    print("\nDecisión no válida, regresando a las opciones de administrador\n")
                                
                            
                            # Condicional que sirve para poder crear usuarios
                            elif eleccion == "2":
                                
                                # Variables que guardaran el nombre y contraseña del nuevo usuario a ingresar
                                nuevo_usuario = input("Ingresa el nombre del nuevo usuario: ")
                                contrasena_usuario = input("Ingresa la contraseña: ")
                                
                                
                                # Variable para controlar el flujo del for, y poder revisar todos los usuarios existentes
                                # este for evita que se agreguen usuarios con el mismo nombre
                                control_nuevo = 1
                                for usuario in usuarios:
                                    # Condicional que revisa si el usuario ingresado ya existe
                                    if nuevo_usuario == usuario[0]:
                                        # Mensaje de alerta al administrador de que el usuario ya existe
                                        print("Usuario ya existente, intenta nuevamente si lo deseas")
                                        # Con esto ya no se busca más en la lista de usuarios
                                        break
                                    # Condicional que sirve para que toda la lista de usuarios pueda recorrerse
                                    else:
                                        # Sirve para la decision futura, cada que compara un nombre de usuario y este es distinto
                                        # suma 1, para que en caso de que todos hayan sido diferentes todos pueda validar 
                                        # el condicional que sigue al finalizar el for
                                        control_nuevo += 1
                                 
                                # Condicional que solo funciona si el nuevo usuario no estaba registrado antes   
                                if control_nuevo == len(usuarios) + 1:
                                    # lista auxiliar para poder agregarla a la base de usuarios
                                    auxiliar_usuario = [nuevo_usuario, contrasena_usuario]
                                    # Esta linea funciona para agregar al nuevo usuario
                                    usuarios.append(auxiliar_usuario)
                                    # Mensaje para indicarle al administrador que su usuario si se pudo agregar
                                    print("Usuario agregado con éxito")
                                
                                    
                                # Variable para guardar la decision del administrador para volver a tomar una opcion
                                decision_nueva = input("¿Quieres hacer otra cosa?(s/n): ")
                            
                            
                                # Condicional para validar la opcion si
                                if decision_nueva == "s":
                                    # Rompe la iteracion del for para pasar al while de las opciones del administrador
                                    continue
                            
                                # Condicional para regresar al menu principal (validar la opcion no)
                                elif decision_nueva == "n":
                                    # Mensaje para anunciar la decision
                                    print("\nGracias, nos vemos pronto\n")
                                    # Modificacion de la variable de control del while para las opciones del administrador
                                    decision2 = False
                                    # Modificacion de la variable de control del while para el inicio de sesion
                                    contador2 = 3
                                    
                                # Condicional por si el administrador mete una opción no válida
                                else:
                                # Mensaje de error
                                    print("\nDecisión no válida, regresando a las opciones de administrador\n")
                                    
                            # Condicional que sirve para que el administrador pueda borrar usuarios       
                            elif eleccion == "3":
                                
                                # Mensaje para que el administrador sepa que hacer
                                print("¿Qué usuario deseas borrar?")
                                # Variable que guarda el nombre del usuario a borrar
                                borrar_usuario = input("Ingresa el nombre del usuario: ")
                                
                                # Variable de control del flujo del for y que servira para tomar decisiones posteriores
                                decision_incorrecta = 1
                                # For que recorre toda la lista de usuarios
                                for i in range(len(usuarios)):
                                    # Condicion que sirve para validar si el usuario a borrar realmente existe
                                    if borrar_usuario == usuarios[i][0]:
                                        # Funcion para borrar al usuario
                                        usuarios.pop(i)
                                        # Mensaje que avisa que la acción fue realizada con éxito
                                        print("Usuario eliminado con éxito")
                                        # Le asignamos a esta variable este valor para el condicional siguiente
                                        decision_incorrecta = len(usuarios) + 2
                                        # Con esto hacemos que ya no se revisen los demas usuarios porque ya hubo coincidencia
                                        break
                                    # Con este condicional permitimos que todos los usuarios puedan ser verificados
                                    else:
                                        # Esta accion nos sirve para saber cuantos usuarios fueron revisados hasta encontrar coincidencia
                                        decision_incorrecta += 1
                                    
                                    
                                # Condicional que nos sirve para indicarnos que todos los usuarios fueron revisados y el que el administrador
                                # quiere borrar no existe
                                if decision_incorrecta == len(usuarios) + 1:
                                    # Mensaje que le avisa al administrador que el usuario no fue encontrado o no existe
                                    print("Usuario no encontrado")
                                    
                                # Variable para guardar la decision del administrador para volver a tomar una opcion
                                decision_nueva = input("¿Quieres hacer otra cosa?(s/n): ")
                            
                            
                                # Condicional para validar la opcion si
                                if decision_nueva == "s":
                                    # Rompe la iteracion del for para pasar al while de las opciones del administrador
                                    continue
                            
                                # Condicional para regresar al menu principal (validar la opcion no)
                                elif decision_nueva == "n":
                                    # Mensaje para anunciar la decision
                                    print("\nGracias, nos vemos pronto\n")
                                    # Modificacion de la variable de control del while para las opciones del administrador
                                    decision2 = False
                                    # Modificacion de la variable de control del while para el inicio de sesion
                                    contador2 = 3
                                    
                                # Condicional que sirve en caso de que la opción que ingresa el administrador no existe
                                else:
                                # Mensaje de error
                                    print("\nDecisión no válida, regresando a las opciones de administrador\n")

                            # Condicional para avisar que la decisión no existe    
                            else:
                               print("\nPon una opción válida por favor, regresando al menú principal...\n")
                    
                       
                    
                        # Condicional que sirve para validar que el administrador quierer obtener algún reporte 
                        elif opcion_administrador == "2":
                            
                            
                            
                            
                            # Variable de control de flujo para las decisiones dentro de esta opcion 2
                            decision3 = True
                            # Bucle para que el administrador pueda estar en este menu hasta que el decida salirse
                            while decision3:
                                
                                # Mensajes que muestran las opciones que tiene el administrador en este submenú
                                print("\n¿Que reporte quieres obtener " + nombre_administrador + "?\n")
                                print("1.- Reporte de ventas de productos\n2.- Reporte de búsquedas de productos")
                                print("3.- Reporte de ventas de productos por categorías\n4.- Reporte de búsquedas de productos por categorías")
                                print("5.- Reporte de reseñas promedio de productos\n6.- Reporte de devoluciones\n7.- Reporte de ingresos por ventas\n8.- Salir")
                                # Variable que guarda las decisiones que tome el administrador en este apartado
                                decision_reporte = input("Escoge un número: ")
                            
                            
                            
                            
                            
                            
                            
                                # Condicional para validar la opcion de reporte de ventas
                                if decision_reporte == "1":
                                    
                                    # Variable de control de flujo que sirve para que el while no sea infinito y se pueda tener la opcion atras
                                    decision4 = True
                                    # Bucle while para que el usuario pueda elegir varios reportes si tener que estar en el menú principal para poder llegar a esta opción
                                    while decision4:
                                        
                                        # Mensaje que muestra los tipos de reportes que existen o que hay en este apartado
                                        print("\n¿Qué reporte de ventas quieres?\n")
                                        print("1.- Productos más vendidos\n2.- Productos menos vendidos\n3.- Productos no vendidos\n4.- Atrás")
                                        
                                        # Variable que guarda el tipo de reporte de ventas que quiera el administrador
                                        decision_ventas = input("Escoge un número: ")

                                        # Condicional que valida si el reporte de ventas es para los productos más vendidos
                                        if decision_ventas == "1":
                                            
                                            # Instrucción para ordenar las ventas de más vendidas a menos vendidas
                                            productos_vendidos.sort(key = lambda x : x[1], reverse = True)
                                            # Mensajes que ayudan a elegir al usuario
                                            print("\nTenemos en esta lista 21 productos")
                                            # Mensaje muy importante para evitar que el programa colapse
                                            print("¿Cuántos quieres visualizar? (No letras ni caracteres especiales)")
                                            # Variable que guarda el número de datos a visualizar por parte del administrador
                                            decision_visualizar = input("Escoge un número: ")
                                            # Condicional que sirve para indicarle al usuario que el número de articulos que escogio es correcto
                                            if int(decision_visualizar) < 22 and int(decision_visualizar) > 0:
                                                
                                                # Ciclo para mostrar los productos uno por uno
                                                for i in range(1, int(decision_visualizar) + 1):
                                                    # Prints para darle formato decente a la manera de que el administrador visualice las ventas
                                                    print(i, ".- Nombre del producto: " + productos_vendidos[i - 1][0])
                                                    print("\tUnidades vendidas: " + str(productos_vendidos[i - 1][1]) + "\n")
                                                
                                                # Varible de control del while que servira para saber si el usuario quiere obtener más reportes de ventas
                                                decision_reporte_ventas = True
                                                    
                                                # While que controla si el administrador quiere o no obtener otro reporte de ventas
                                                while decision_reporte_ventas:
                                                     
                                                    # Variable que sirve para preguntarle al administrador si quiere otro reporte de ventas y el cual guarda la respuesta
                                                    decision_nueva = input("¿Quieres obtener otro reporte de ventas?(s/n): ")
                                                       
                                                    # Condicional para validar la opcion si
                                                    if decision_nueva == "s":
                                                        # Cambio en el valor de la variable de control del while para que la pregunta ya no se repita
                                                        decision_reporte_ventas = False
                                                            
                                                    # Condicional para validar la opción no
                                                    elif decision_nueva == "n":
                                                        # Mensaje que sirve para mostrar al usuario que regresará al menú de reportes
                                                        print("\nSaliendo de los reportes de ventas, regresando al menú de reportes generales")
                                                        # Cambio en la variable de control del while para que la pregunta no se repita
                                                        decision_reporte_ventas = False
                                                        # Cambio en el valor de la variable de control del flujo del menú de reportes de ventas para ir al menú de reportes
                                                        decision4 = False
                                                        
                                                            
                                                    # Condicional que funciona para avisarle al administrador que la respuesta que da no es válida     
                                                    else:
                                                        # Mensaje de advertencia al administrador
                                                        print("Ingresa una opción válida por favor")
                                                        
                                            # Condicional que regresa al administrador al menú de reporte de ventas por equivocarse          
                                            else:
                                                # Mensaje de advertencia al administrador si introdujo un número incorrecto
                                                print("Número de productos a visualizar no correcto, regresando al menú de reportes de ventas\n")
                                                continue
                                        
                                            continue
                                        
                                        # Condicional para validar la opción de obtener reporte de productos con menos ventas
                                        if decision_ventas == "2":
                                            
                                            # Mensajes que ayudan a elegir al usuario
                                            print("\nTenemos en esta lista 21 productos")
                                            # Mensaje muy importante para evitar que el programa colapse
                                            print("¿Cuántos quieres visualizar? (No letras ni caracteres especiales)")
                                            # Variable que guarda el número de datos a visualizar por parte del administrador
                                            decision_visualizar = input("Escoge un número: ")
                                            # Condicional que sirve para indicarle al usuario que el número de articulos que escogio es correcto
                                            if int(decision_visualizar) < 22 and int(decision_visualizar) > 0:
                                                
                                                # Ciclo para mostrar los productos uno por uno
                                                for i in range(1, int(decision_visualizar) + 1):
                                                    # Prints para darle formato decente a la manera de que el administrador visualice las ventas
                                                    print(i, ".- Nombre del producto: " + productos_vendidos_menos[i - 1][0])
                                                    print("\tUnidades vendidas: " + str(productos_vendidos_menos[i - 1][1]) + "\n")
                                                
                                                # Varible de control del while que servira para saber si el usuario quiere obtener más reportes de ventas
                                                decision_reporte_ventas = True
                                                    
                                                # While que controla si el administrador quiere o no obtener otro reporte de ventas
                                                while decision_reporte_ventas:
                                                     
                                                    # Variable que sirve para preguntarle al administrador si quiere otro reporte de ventas y el cual guarda la respuesta
                                                    decision_nueva = input("¿Quieres obtener otro reporte de ventas?(s/n): ")
                                                       
                                                    # Condicional para validar la opcion si
                                                    if decision_nueva == "s":
                                                        # Cambio en el valor de la variable de control del while para que la pregunta ya no se repita
                                                        decision_reporte_ventas = False
                                                            
                                                    # Condicional para validar la opción no
                                                    elif decision_nueva == "n":
                                                        # Mensaje que sirve para mostrar al usuario que regresará al menú de reportes
                                                        print("\nSaliendo de los reportes de ventas, regresando al menú de reportes generales")
                                                        # Cambio en la variable de control del while para que la pregunta no se repita
                                                        decision_reporte_ventas = False
                                                        # Cambio en el valor de la variable de control del flujo del menú de reportes de ventas para ir al menú de reportes
                                                        decision4 = False
                                                            
                                                    # Condicional que funciona para avisarle al administrador que la respuesta que da no es válida     
                                                    else:
                                                        # Mensaje de advertencia al usuario
                                                        print("Ingresa una opción válida por favor")
                                                        
                                            # Condicional que regresa al administrador al menú de reporte de ventas por equivocarse          
                                            else:
                                                # Mensaje de que el número de productos a visualizar está fuera de rango
                                                print("Número de productos a visualizar no correcto, regresando al menú de reportes de ventas\n")
                                                continue
                                            
                                            continue
                                        
                                        # Condicional para validar la opción de productos no vendidos
                                        elif decision_ventas == "3":
                                            
                                            # Ordenamos los productos por orden alfabético
                                            productos_no_vendidos.sort(key = lambda x : x[0])
                                            # Mensajes que ayudan al administrador a saber cuántos productos hay y que no debe hacer
                                            print("\nTenemos en esta lista 54 productos")
                                            print("¿Cuántos quieres visualizar? (No letras ni caracteres especiales)")
                                            
                                            # Variable que guarda el número de productos a visualizar
                                            decision_visualizar = input("Escoge un número: ")
                                            
                                            # Condicional que sirve para indicarle al usuario que el número de articulos que escogio es correcto
                                            if int(decision_visualizar) < 55 and int(decision_visualizar) > 0:
                                                
                                                # Ciclo para mostrar los productos uno por uno
                                                for i in range(1, int(decision_visualizar) + 1):
                                                    # Prints para darle formato decente a la manera de que el administrador visualice las ventas
                                                    print(i, ".- Nombre del producto: " + productos_no_vendidos[i - 1][0])
                                                    print("\tUnidades vendidas: " + str(productos_no_vendidos[i - 1][1]) + "\n")
                                                
                                                # Varible de control del while que servira para saber si el usuario quiere obtener más reportes de ventas
                                                decision_reporte_ventas = True
                                                    
                                                # While que controla si el administrador quiere o no obtener otro reporte de ventas
                                                while decision_reporte_ventas:
                                                     
                                                    # Variable que sirve para preguntarle al administrador si quiere otro reporte de ventas y el cual guarda la respuesta
                                                    decision_nueva = input("¿Quieres obtener otro reporte de ventas?(s/n): ")
                                                       
                                                    # Condicional para validar la opcion si
                                                    if decision_nueva == "s":
                                                        # Cambio en el valor de la variable de control del while para que la pregunta ya no se repita
                                                        decision_reporte_ventas = False
                                                            
                                                    # Condicional para validar la opción no
                                                    elif decision_nueva == "n":
                                                        # Mensaje que sirve para mostrar al usuario que regresará al menú de reportes
                                                        print("\nSaliendo de los reportes de ventas, regresando al menú de reportes generales")
                                                        # Cambio en la variable de control del while para que la pregunta no se repita
                                                        decision_reporte_ventas = False
                                                        # Cambio en el valor de la variable de control del flujo del menú de reportes de ventas para ir al menú de reportes
                                                        decision4 = False
                                                            
                                                    # Condicional que funciona para avisarle al administrador que la respuesta que da no es válida     
                                                    else:
                                                        # Mensaje de advertencia al usuario
                                                        print("Ingresa una opción válida por favor")
                                                        
                                            # Condicional que regresa al administrador al menú de reporte de ventas por equivocarse          
                                            else:
                                                # Mensaje de que el número de productos a visualizar está fuera de rango
                                                print("Número de productos a visualizar no correcto, regresando al menú de reportes de ventas\n")
                                                continue
                                            
                                            continue
   
                                        # Condicional para regresar al menú de reportes si el usuario ya no quiere reportes de ventas
                                        elif decision_ventas == "4":
                                            # Mensaje que avisa que regresa el administrador al menú de reportes
                                            print("Saliendo de los reportes de búsquedas, volviendo al menú de reportes")
                                            # Cambio en el valor de la variable de condicion del while para mantenerse en el menú de reportes de ventas, con esto salimos de dicho menú
                                            decision4 = False
                                        # Condicional para validar si la opción que introduce el administrador no es válida
                                        else:
                                           print("\nPor favor, escoge una opción válida")
                                           
                                    continue

   
                                # Condicional para validar la opcion de reporte de búsquedas
                                if decision_reporte == "2":
                                    
                                    # Variable de control de flujo que sirve para que exista la función atrás y el programa sea más dinámico
                                    decision4 = True
                                    # Bucle while para que el usuario pueda quedarse en el menú de reportes de búsqueda hasta que el decida salirse
                                    while decision4:
                                        
                                        # Mensaje que muestra los tipos de reportes que existen o que hay en este apartado
                                        print("\n¿Qué reporte de búsquedas quieres?\n")
                                        print("1.- Productos más buscados\n2.- Productos menos buscados\n3.- Productos no buscados\n4.- Atrás")
                                        
                                        # Variable que guarda el tipo de reporte de búsquedas que quiera el administrador
                                        decision_busqueda = input("Escoge un número: ")
                                      
   
    
   
                                        # Condicional que valida si el reporte de búsquedas es para los productos más vendidos
                                        if decision_busqueda == "1":
                                            
                                            # Instrucción para ordenar las busquedas de más buscados a menos buscados
                                            productos_buscados.sort(key = lambda x : x[1], reverse = True)
                                            # Mensajes que ayudan a elegir al usuario
                                            print("\nTenemos en esta lista 28 productos")
                                            # Mensaje muy importante para evitar que el programa colapse
                                            print("¿Cuántos quieres visualizar? (No letras ni caracteres especiales)")
                                            # Variable que guarda el número de datos a visualizar por parte del administrador
                                            decision_visualizar = input("Escoge un número: ")
                                            # Condicional que sirve para indicarle al usuario que el número de articulos que escogio es correcto
                                            if int(decision_visualizar) < 29 and int(decision_visualizar) > 0:
                                                
                                                # Ciclo para mostrar los productos uno por uno
                                                for i in range(1, int(decision_visualizar) + 1):
                                                    # Prints para darle formato decente a la manera de que el administrador visualice las búsquedas
                                                    print(i, ".- Nombre del producto: " + productos_buscados[i - 1][0])
                                                    print("\tNúmero de búsquedas: " + str(productos_buscados[i - 1][1]) + "\n")
                                                
                                                # Varible de control del while que servira para saber si el usuario quiere obtener más reportes de búsquedas
                                                decision_reporte_busquedas = True
                                                    
                                                # While que controla si el administrador quiere o no obtener otro reporte de búsquedas
                                                while decision_reporte_busquedas:
                                                     
                                                    # Variable que sirve para preguntarle al administrador si quiere otro reporte de búsquedas y el cual guarda la respuesta
                                                    decision_nueva = input("¿Quieres obtener otro reporte de búsquedas?(s/n): ")
                                                       
                                                    # Condicional para validar la opcion si
                                                    if decision_nueva == "s":
                                                        # Cambio en el valor de la variable de control del while para que la pregunta ya no se repita
                                                        decision_reporte_busquedas = False
                                                            
                                                    # Condicional para validar la opción no
                                                    elif decision_nueva == "n":
                                                        # Mensaje que sirve para mostrar al usuario que regresará al menú de reportes
                                                        print("\nSaliendo de los reportes de búsquedas, regresando al menú de reportes generales")
                                                        # Cambio en la variable de control del while para que la pregunta no se repita
                                                        decision_reporte_busquedas = False
                                                        # Cambio en el valor de la variable de control del flujo del menú de reportes de búsquedas para ir al menú de reportes
                                                        decision4 = False
                                                            
                                                    # Condicional que funciona para avisarle al administrador que la respuesta que da no es válida     
                                                    else:
                                                        # Mensaje de advertencia al administrador
                                                        print("Ingresa una opción válida por favor")
                                                        
                                            # Condicional que regresa al administrador al menú de reporte de búsquedass por equivocarse          
                                            else:
                                                # Mensaje de advertencia al administrador si introdujo un número incorrecto
                                                print("Número de productos a visualizar no correcto, regresando al menú de reportes de búsquedas\n")
                                                continue
                                            continue
                                        
                                        # Condicional para validar la opción de obtener reporte de productos con menos búsquedas
                                        if decision_busqueda == "2":
                                            
                                            # Mensajes que ayudan a elegir al usuario
                                            print("\nTenemos en esta lista 28 productos")
                                            # Mensaje muy importante para evitar que el programa colapse
                                            print("¿Cuántos quieres visualizar? (No letras ni caracteres especiales)")
                                            # Variable que guarda el número de datos a visualizar por parte del administrador
                                            decision_visualizar = input("Escoge un número: ")
                                            # Condicional que sirve para indicarle al usuario que el número de articulos que escogio es correcto
                                            if int(decision_visualizar) < 29 and int(decision_visualizar) > 0:
                                                
                                                # Ciclo para mostrar los productos uno por uno
                                                for i in range(1, int(decision_visualizar) + 1):
                                                    # Prints para darle formato decente a la manera de que el administrador visualice las búsquedas
                                                    print(i, ".- Nombre del producto: " + productos_menos_buscados[i - 1][0])
                                                    print("\tNúmero de búsquedas: " + str(productos_menos_buscados[i - 1][1]) + "\n")
                                                
                                                # Varible de control del while que servira para saber si el usuario quiere obtener más reportes de búsquedas
                                                decision_reporte_busquedas = True
                                                    
                                                # While que controla si el administrador quiere o no obtener otro reporte de búsquedas
                                                while decision_reporte_busquedas:
                                                     
                                                    # Variable que sirve para preguntarle al administrador si quiere otro reporte de búsquedas y el cual guarda la respuesta
                                                    decision_nueva = input("¿Quieres obtener otro reporte de búsquedas?(s/n): ")
                                                       
                                                    # Condicional para validar la opcion si
                                                    if decision_nueva == "s":
                                                        # Cambio en el valor de la variable de control del while para que la pregunta ya no se repita
                                                        decision_reporte_busquedas = False
                                                            
                                                    # Condicional para validar la opción no
                                                    elif decision_nueva == "n":
                                                        # Mensaje que sirve para mostrar al usuario que regresará al menú de reportes
                                                        print("\nSaliendo de los reportes de búsquedas, regresando al menú de reportes generales")
                                                        # Cambio en la variable de control del while para que la pregunta no se repita
                                                        decision_reporte_busquedas = False
                                                        # Cambio en el valor de la variable de control del flujo del menú de reportes de búsquedas para ir al menú de reportes
                                                        decision4 = False
                                                            
                                                    # Condicional que funciona para avisarle al administrador que la respuesta que da no es válida     
                                                    else:
                                                        # Mensaje de advertencia al usuario
                                                        print("Ingresa una opción válida por favor")
                                                        
                                            # Condicional que regresa al administrador al menú de reporte de búsquedas por equivocarse          
                                            else:
                                                # Mensaje de que el número de productos a visualizar está fuera de rango
                                                print("Número de productos a visualizar no correcto, regresando al menú de reportes de búsquedas\n")
                                                continue
                                            continue
                                        
                                       
                                        
                                        # Condicional para validar la opción de productos no buscados
                                        elif decision_busqueda == "3":
                                            
                                            # Ordenamos los productos por orden alfabético
                                            productos_no_buscados.sort(key = lambda x : x[0])
                                            # Mensajes que ayudan al administrador a saber cuántos productos hay y que no debe hacer
                                            print("\nTenemos en esta lista 40 productos")
                                            print("¿Cuántos quieres visualizar? (No letras ni caracteres especiales)")
                                            
                                            # Variable que guarda el número de productos a visualizar
                                            decision_visualizar = input("Escoge un número: ")
                                            
                                            # Condicional que sirve para indicarle al usuario que el número de articulos que escogio es correcto
                                            if int(decision_visualizar) < 41 and int(decision_visualizar) > 0:
                                                
                                                # Ciclo para mostrar los productos uno por uno
                                                for i in range(1, int(decision_visualizar) + 1):
                                                    # Prints para darle formato decente a la manera de que el administrador visualice los productos no buscados
                                                    print(i, ".- Nombre del producto: " + productos_no_buscados[i - 1][0])
                                                    print("\tNúmero de búsquedas: " + str(productos_no_buscados[i - 1][1]) + "\n")
                                                
                                                # Varible de control del while que servira para saber si el usuario quiere obtener más reportes de búsquedas
                                                decision_reporte_busquedas = True
                                                    
                                                # While que controla si el administrador quiere o no obtener otro reporte de búsquedas
                                                while decision_reporte_busquedas:
                                                     
                                                    # Variable que sirve para preguntarle al administrador si quiere otro reporte de búsquedas y el cual guarda la respuesta
                                                    decision_nueva = input("¿Quieres obtener otro reporte de búsquedas?(s/n): ")
                                                       
                                                    # Condicional para validar la opcion si
                                                    if decision_nueva == "s":
                                                        # Cambio en el valor de la variable de control del while para que la pregunta ya no se repita
                                                        decision_reporte_busquedas = False
                                                            
                                                    # Condicional para validar la opción no
                                                    elif decision_nueva == "n":
                                                        # Mensaje que sirve para mostrar al usuario que regresará al menú de reportes
                                                        print("\nSaliendo de los reportes de búsquedas, regresando al menú de reportes generales")
                                                        # Cambio en la variable de control del while para que la pregunta no se repita
                                                        decision_reporte_busquedas = False
                                                        # Cambio en el valor de la variable de control del flujo del menú de reportes de búsquedas para ir al menú de reportes
                                                        decision4 = False
                                                            
                                                    # Condicional que funciona para avisarle al administrador que la respuesta que da no es válida     
                                                    else:
                                                        # Mensaje de advertencia al usuario
                                                        print("Ingresa una opción válida por favor")
                                                        
                                            # Condicional que regresa al administrador al menú de reporte de búsquedas por equivocarse          
                                            else:
                                                # Mensaje de que el número de productos a visualizar está fuera de rango
                                                print("Número de productos a visualizar no correcto, regresando al menú de reportes de búsquedas\n")
                                                continue
                                            continue
   
                                        # Condicional para regresar al menú de reportes si el usuario ya no quiere reportes de búsquedas
                                        elif decision_busqueda == "4":
                                            # Mensaje que avisa que regresa el administrador al menú de reportes
                                            print("Saliendo de los reportes de búsquedas, volviendo al menú de reportes")
                                            # Cambio en el valor de la variable de condicion del while para mantenerse en el menú de reportes de búsquedas, con esto salimos de dicho menú
                                            decision4 = False
                                        # Condicional para validar si la opción que introduce el administrador no es válida
                                        else:
                                           print("\nPor favor, escoge una opción válida")

                                    continue
                                
                                


                                # Condicional que válida la opción de reportes de ventas por categoría
                                elif decision_reporte == "3":
                                    
                                    # Variable de control del submenú de reportes de ventas por categorías
                                    decision4 = True
                                    
                                    # Bucle while para permanecer en el submenú hasta que el administrador escoja lo contrario
                                    while decision4:
                                        
                                        # Mensajes al administrador de las opciones de este submenú
                                        print("¿Qué reporte de ventas de productos por categorías quieres?\n")
                                        print("1.- Reporte de ventas para procesadores\n2.- Reporte de ventas para tarjetas de vídeo\n3.- Reporte de ventas para tarjetas madre")
                                        print("4.- Reporte de ventas para discos duros\n5.- Reporte de ventas para memorias usb\n6.- Reporte de ventas para pantallas")
                                        print("7.- Reporte de ventas para bocinas\n8.- Reporte de ventas para audífonos\n9.- Reporte total ventas por categoría\n10.- Atrás")
                                        
                                        # Variable que guarda la decisión del administrador
                                        decision_reporte_categoria = input("Escoga un número: ")
                                    
                                        # Condicional para validar la categoría de procesadores
                                        if decision_reporte_categoria == "1":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de procesadores son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_procesadores)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre del procesador: " + ventas_procesadores[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_procesadores[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de tarjetas de vídeo
                                        elif decision_reporte_categoria == "2":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de tarjetas de vídeo son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_tarjetas_video)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la tarjeta de vídeo: " + ventas_tarjetas_video[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_tarjetas_video[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de tarjetas madre
                                        elif decision_reporte_categoria == "3":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de tarjetas madre son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_tarjetas_madre)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la tarjeta madre: " + ventas_tarjetas_madre[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_tarjetas_madre[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de discos duros
                                        elif decision_reporte_categoria == "4":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de discos duros son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_discos_duros)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre del disco duro: " + ventas_discos_duros[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_discos_duros[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de memorias usb
                                        elif decision_reporte_categoria == "5":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de memorias USB son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_memorias_usb)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la memoria USB: " + ventas_memorias_usb[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_memorias_usb[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        
                                        # Condicional para validar la categoría de pantallas
                                        elif decision_reporte_categoria == "6":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de pantallas son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_pantallas)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la pantalla: " + ventas_pantallas[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_pantallas[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de bocinas
                                        elif decision_reporte_categoria == "7":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de bocinas son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_bocinas)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la bocina: " + ventas_bocinas[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_bocinas[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de audífonos
                                        elif decision_reporte_categoria == "8":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas de audífonos son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_audifonos)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre del audífono: " + ventas_audifonos[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_audifonos[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        
                                        # Condicional para validar todas las categorías
                                        elif decision_reporte_categoria == "9":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas ventas por cada categoría son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(ventas_categorias)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la categoría: " + ventas_categorias[i][0] + "\n")
                                                print("    Número de ventas: " + str(ventas_categorias[i][1]) + "\n")
                                                
                                            print("Regresando al menú de ventas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de ventas por categoría quierer el administrador
                                            continue
                                        

                                        # Condicional para regresar al menú principal
                                        elif decision_reporte_categoria == "10":
                                            # Mensaje que indica que la acción si fue tomada como válida
                                            print("Saliendo de los reportes de ventas por categorías, volviendo al menú de reportes")
                                            # Cambio de valor en la variable de control del while para este menu, ocasionando que regrese al menú principal
                                            decision4 = False
                                            # Instrucción para saltarse al menú principal
                                            continue
                                        
                                        # Condicional para validar que una opción no es correcta
                                        else:
                                            # Mensaje de error al administrador
                                            print("Opción no válida, por favor intente nuevamente\n")
                                
                                    continue


                                # Condicional para validar la opción de reporte de búsquedas por categoría
                                elif decision_reporte == "4":
                                        

                                    # Variable de control del submenú de reportes de búsquedas por categorías
                                    decision4 = True
                                    
                                    # Bucle while para permanecer en el submenú hasta que el administrador escoja lo contrario
                                    while decision4:
                                        
                                        # Mensajes al administrador de las opciones de este submenú
                                        print("\n¿Qué reporte de búsquedas de productos por categorías quieres?\n")
                                        print("1.- Reporte de búsquedas para procesadores\n2.- Reporte de búsquedas para tarjetas de vídeo\n3.- Reporte de búsquedas para tarjetas madre")
                                        print("4.- Reporte de búsquedas para discos duros\n5.- Reporte de búsquedas para memorias usb\n6.- Reporte de búsquedas para pantallas")
                                        print("7.- Reporte de búsquedas para bocinas\n8.- Reporte de búsquedas para audífonos\n9.- Reporte total búsquedas por categoría\n10.- Atrás")
                                        
                                        # Variable que guarda la decisión del administrador
                                        decision_reporte_categoria = input("Escoga un número: ")
                                    
                                        # Condicional para validar la categoría de procesadores
                                        if decision_reporte_categoria == "1":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de procesadores son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_procesadores)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre del procesador: " + busquedas_procesadores[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_procesadores[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quiere el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de tarjetas de vídeo
                                        elif decision_reporte_categoria == "2":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de tarjetas de vídeo son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_tarjetas_video)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la tarjeta de vídeo: " + busquedas_tarjetas_video[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_tarjetas_video[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de tarjetas madre
                                        elif decision_reporte_categoria == "3":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de tarjetas madre son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_tarjetas_madre)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la tarjeta madre: " + busquedas_tarjetas_madre[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_tarjetas_madre[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de discos duros
                                        elif decision_reporte_categoria == "4":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de discos duros son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_discos_duros)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre del disco duro: " + busquedas_discos_duros[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_discos_duros[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de memorias usb
                                        elif decision_reporte_categoria == "5":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de memorias USB son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_memorias_usb)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la memoria USB: " + busquedas_memorias_usb[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_memorias_usb[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        
                                        # Condicional para validar la categoría de pantallas
                                        elif decision_reporte_categoria == "6":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de pantallas son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_pantallas)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la pantalla: " + busquedas_pantallas[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_pantallas[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de bocinas
                                        elif decision_reporte_categoria == "7":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de bocinas son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_bocinas)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la bocina: " + busquedas_bocinas[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_bocinas[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        # Condicional para validar la categoría de audífonos
                                        elif decision_reporte_categoria == "8":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas de audífonos son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_audifonos)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre del audífono: " + busquedas_audifonos[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_audifonos[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        
                                        
                                        
                                        # Condicional para validar todas las categorías
                                        elif decision_reporte_categoria == "9":
                                            
                                            # Mensaje para indicarle lo que mostrará el programa al administrador
                                            print("\nLas búsquedas por cada categoría son las siguientes:\n")
                                            
                                            # Ciclo para imprimir cada producto
                                            for i in range(len(busquedas_categorias)):
                                                # Forma de mostrar de manera clara lo que pidió el administrador
                                                print(i+1, ".- Nombre de la categoría: " + busquedas_categorias[i][0] + "\n")
                                                print("    Número de búsquedas: " + str(busquedas_categorias[i][1]) + "\n")
                                                
                                            print("Regresando al menú de búsquedas de productos por categorías\n")
                                            
                                            # Con esto pasamos automáticamente a preguntar de nuevo que reporte de búsquedas por categoría quierer el administrador
                                            continue
                                        

                                        # Condicional para regresar al menú principal
                                        elif decision_reporte_categoria == "10":
                                            # Mensaje que indica que la acción si fue tomada como válida
                                            print("Saliendo de los reportes de búsquedas por categorías, volviendo al menú de reportes")
                                            # Cambio de valor en la variable de control del while para este menu, ocasionando que regrese al menú principal
                                            decision4 = False
                                            # Instrucción para saltarse al menú principal
                                            continue
                                        
                                        # Condicional para validar que una opción no es correcta
                                        else:
                                            # Mensaje de error al administrador
                                            print("Opción no válida, por favor intente nuevamente\n")
                                


                                    continue


                                # Condicional para validar la opción de reporte de reseñas
                                elif decision_reporte == "5":
                                    
                                    # Variable de control para el ciclo while para obtener 
                                    menu_resenas = True
                                    # Ciclo para poder permanecer en el menú de reseñas promedio de productos
                                    while menu_resenas:
                                        
                                        # Mensajes para que el administrador escoja lo que mejor le convenga
                                        print("\n¿Qué reporte de reseñas quieres obtener?")
                                        print("1.- Productos con mejores reseñas\n2.- Productos con peores reseñas\n3.- Productos sin reseñas")
                                        print("4.- Atrás")
                                        
                                        # Variable que guarda la decisión del administrador en este menú
                                        decision_resenas = input("Escoge un número: ")
                                    
                                        # Opción para validar la opción de mejores productos
                                        if decision_resenas == "1":
                                            
                                            # Mensaje al administrador para lograr que no se equivoque en su decisión
                                            print("\nTenemos en esta lista 21 productos")
                                            print("¿Cuántos quieres visualizar? (no letras ni caracteres especiales)")
                                            
                                            # Variable que guarda la decisión del administrador del número de productos a mostrar
                                            numero_productos = input("Escoge un número: ")
                                            
                                            # Condicional para verificar que el número de productos a visualizar esta dentro del rango
                                            if int(numero_productos) > 0 and int(numero_productos) < 22:
                                                
                                                # Ciclo para que se muestren los productos en orden
                                                for i in range (1, int(numero_productos) + 1):
                                                    # Mensajes o impresiones para que sea agradable la visualización de productos
                                                    print("\n",i, ".- Nombre del producto: " + productos_mejores_resenas[i-1][0])
                                                    print("    Calificación de reseña promedio: " + str(productos_mejores_resenas[i - 1][1]))
                                                # Instrucción para terminar la ejecución de la opción de productos con mejores reseñas
                                                continue
                                            
                                            # Condicional en caso de que no sea válido el número de productos a visualizar
                                            else:
                                                # Mensaje de error al administrador
                                                print("Número de productos a visualizar incorrecto, volviendo al menú de reseñas")
                                                continue
                                            # Instrucción para regresar al menú de reseñas
                                            continue
                                        
                                        
                                        
                                        # Opción para validar la opción de peores productos
                                        elif decision_resenas == "2":
                                            
                                            # Mensaje al administrador para lograr que no se equivoque en su decisión
                                            print("\nTenemos en esta lista 21 productos")
                                            print("¿Cuántos quieres visualizar? (no letras ni caracteres especiales)")
                                            
                                            # Variable que guarda la decisión del administrador del número de productos a mostrar
                                            numero_productos = input("Escoge un número: ")
                                            
                                                  
                                            # Condicional para verificar que el número de productos a visualizar esta dentro del rango
                                            if int(numero_productos) > 0 and int(numero_productos) < 22:
                                                
                                                # Ciclo para que se muestren los productos en orden
                                                for i in range (1, int(numero_productos) + 1):
                                                    # Mensajes o impresiones para que sea agradable la visualización de productos
                                                    print("\n",i, ".- Nombre del producto: " + productos_peores_resenas[i-1][0])
                                                    print("    Calificación de reseña promedio: " + str(productos_peores_resenas[i - 1][1]))
                                                # Instrucción para terminar la ejecución de la opción de productos con peores reseñas
                                                continue
                                            
                                            # Condicional en caso de que no sea válido el número de productos a visualizar
                                            else:
                                                # Mensaje de error al administrador
                                                print("Número de productos a visualizar incorrecto, volviendo al menú de reseñas")
                                                continue
                                            # Instrucción para regresar al menú de reseñas
                                            continue
                                        
                                        # Condicional que valida la opción de productos sin reseñas
                                        elif decision_resenas == "3":
                                            
                                            # Mensaje al administrador para lograr que no se equivoque en su decisión
                                            print("\nTenemos en esta lista 54 productos")
                                            print("¿Cuántos quieres visualizar? (no letras ni caracteres especiales)")
                                            
                                            # Variable que guarda la decisión del administrador del número de productos a mostrar
                                            numero_productos = input("Escoge un número: ")
                                            
                                            # Condicional para verificar que el número de productos a visualizar esta dentro del rango
                                            if int(numero_productos) > 0 and int(numero_productos) < 55:
                                                
                                                # Ciclo para que se muestren los productos en orden
                                                for i in range (1, int(numero_productos) + 1):
                                                    # Mensajes o impresiones para que sea agradable la visualización de productos
                                                    print("\n",i, ".- Nombre del producto: " + productos_sin_resenas[i-1][0])
                                                    print("    Calificación de reseña promedio: " + str(productos_sin_resenas[i - 1][1]))
                                                # Instrucción para terminar la ejecución de la opción de productos sin reseñas
                                                continue
                                            
                                            # Condicional en caso de que no sea válido el número de productos a visualizar
                                            else:
                                                # Mensaje de error al administrador
                                                print("Número de productos a visualizar incorrecto, volviendo al menú de reseñas")
                                                continue
                                            # Instrucción para regresar al menú de reseñas
                                            continue

                                    
                                        # Opción para validar que el administrador quiere volver al menú de reportes
                                        elif decision_resenas == "4":
                                            # Mensaje que muestra que la opción si fue aplicada
                                            print("Saliendo de las reseñas promedio de productos, volviendo al menú de reportes")
                                            # Forma de cambiar el valor de la variable de control de flujo de este menu de reseñas
                                            menu_resenas = False
                                            # Instrucción para volver al menú principal
                                            continue
                                        
                                        # Condicional en caso de que ninguna opción fuera correcta
                                        else:
                                            # Mensaje de error para el administrador
                                            print("Opción no válida, por favor intente nuevamente\n")

                                    continue
                                
                                elif decision_reporte == "6":
                                    
                                    print("\nEstos son los productos con devolución\n")
                                    
                                    for i in range(len(productos_si_devueltos)):
                                        print(i+1, ".- Nombre del producto: " + productos_si_devueltos[i][0])
                                        print("    Número de devoluciones: " + str(productos_si_devueltos[i][1]) + "\n")
                                    
                                    print("Regresando al menú de reportes")
                                    
                                    continue
                                
                                
                                
                                # Condicional para validar el reporte de ingresos
                                elif decision_reporte == "7":
                                    
                                    # Variable de control para el menú de reportes de ingresos
                                    menu_ingreso = True
                                    
                                    # Menú de reportes de ingresos controlado con un while
                                    while menu_ingreso:
                                        
                                        # Mensajes de opciones
                                        print("\n¿Qué reporte de ingresos o ventas quieres?")
                                        print("1.- Ingresos por mes(hasta septiembre-2020)\n2.- Ventas por mes(hasta septiembre-2020)\n3.- Ingresos promedios por mes(hasta septiembre-2020)")
                                        print("4.- Ventas promedio por mes(hasta septiembre-2020)\n5.- Ingresos por categorías\n6.- Total de ingresos por año\n7.- Atrás")
                                        
                                        # Variable para las decisiones de las decisiones del administrador
                                        decision_admin = input("Escoge un número: ")
                                        
                                        # Condicional que valida la opción 1
                                        if decision_admin == "1":
                                            
                                            # Mensaje de ayuda al usuario
                                            print("\nLos ingresos por mes son los siguientes:\n")
                                            
                                            # Ciclo para mostrar de mejor manera el resultado
                                            for i in range(len(ingreso_mensual_2020)):
                                                print(i+1, ".- Mes: " + ingreso_mensual_2020[i][0])
                                                print("    Ingreso: " + "$" + str(ingreso_mensual_2020[i][1]) + "\n")
                                            
                                            # Mensaje de aviso al administrador
                                            print("Regresando al menú de reportes de ingresos")
                                            
                                            # Instrucción para salir al menú de reportes
                                            continue
                                        # Condición para validar la opción 2
                                        elif decision_admin == "2":
                                            # Mensaje para anunciar al admin
                                            print("\nLas ventas por mes son las siguientes:\n")
                                            
                                            # Ciclo para mostrar mensajes de mejor forma
                                            for i in range(len(ventas_mensuales_2020)):
                                                print(i+1, ".- Mes: " + ventas_mensuales_2020[i][0])
                                                print("    Ventas: " + str(ventas_mensuales_2020[i][1]) + "\n")
                                            # Mensaje para el administrador
                                            print("Regresando al menú de reportes de ingresos")
                                            # Instrucción para no usar más opciones y volver a preguntar
                                            continue
                                        
                                        # Condición para validar la opción 3
                                        elif decision_admin == "3":
                                            
                                            # Mensajes para el administrador
                                            print("\nLos ingresos promedios mensuales por mes son: $" + "{0:.2f}".format(ingreso_promedio_mensual_2020))
                                            
                                            # Mensaje para el administrador
                                            print("\nRegresando al menú de reportes de ingresos")
                                            # Instrucción para controlar el menú
                                            continue
                                        
                                        # Condición para validar la opción 4
                                        elif decision_admin == "4":
                                            # Mensajes para el administrador con las respuestas a lo que busca
                                            print("\nLas ventas promedio mensuales son: " + "{0:.2f}".format(ventas_promedio_mensuales))
                                            # Mensaje para el administrador
                                            print("\nRegresando al menú de reportes de ingresos")
                                            # Instrucción para controlar el menú
                                            continue
                                        
                                        # Condición para validar la opción 5
                                        elif decision_admin == "5":
                                            
                                            # Mensajes para el administrador con las respuestas a lo que busca
                                            print("\nLos ingresos por categoría son los siguientes\n")
                                            
                                            # ciclo para las respuestas
                                            for i in range(len(ventas_categorias)):
                                                print(i+1, ".- Nombre de la categoría: " + ingreso_categorias[i][0])
                                                print("    Ingreso: $" + str(ingreso_categorias[i][1]) + "\n")
                                            # Mensaje para el administrador
                                            print("Regresando al menú de reportes de ingresos")
                                            # Instrucción para controlar el menú
                                            continue
                                        # Condición para validar la opción 6
                                        elif decision_admin == "6":
                                            
                                            # Mensajes para el administrador con las respuestas a lo que busca
                                            print("\nLos ingresos totales por año son los siguientes: \n")
                                            print("2002: $" + str(ingreso2002))
                                            print("2019: $" + str(ingreso2019))
                                            print("2020: $" + str(ingreso2020))
                                            
                                            # Mensajes para el administrador
                                            print("\nRegresando al menú de reportes de ingresos")
                                            
                                            
                                            # Instrucción para controlar el menú
                                            continue
                                            
                                        # Condición para validar la opción 7
                                        elif decision_admin == "7":
                                            # Mensajes para el administrador con las respuestas a lo que busca
                                            print("\nSaliendo de los reportes de ingresos y ventas, volviendo al menú principal")
                                            # Variables para salir del menú
                                            menu_ingreso = False
                                            # Instrucción para controlar el menú
                                            continue
                                        # Condición para validar errores
                                        else:
                                            # Mensaje de error para el administrador
                                            print("Opción no válida, por favor intente nuevamente\n")
                                
                                



                                    # Instrucción para salir del menú correctamente
                                    continue
                                    
                                
                                

                                # Condicional para validar la opción de salir en el menú de reportes
                                elif decision_reporte == "8":
                                    # Mensaje para indicar que si se lleva a cabo la opción indicada
                                    print("\nVolviendo al menú principal...\n")
                                    # Cambio en la variable de control del menú de reportes para regresar al menú principal
                                    decision3 = False
                                    continue
                                
                            
                                # Condicional para decir que un valor introduce es correcto
                                else:
                                    # Mensaje para que el administrador sepa que lo que introdujo está mal
                                    print("\nPor favor, escoge un opción válida")
                            

                        # Condicional que válida que el administrador quiere salirse de la sesión
                        elif opcion_administrador == "3":
                            # Mensaje personalizado de despedida para el administardor
                            print("\nNos vemos pronto " + nombre_administrador)
                            # Cambiamos el valor de esta variable para salir del while del inicio de sesión
                            decision2 = False
                            # Cambiamos el valor de esta variable para que el programa nos regrese al menú principal y no 
                            # a iniciar sesión y pedirnos de nuevo nombre de administrador y su contraseña
                            contador2 = 3
                            
                        
                        
                        # Condicional para avisar que no existe la opción que el administrador indica
                        else:
                            # Mensaje para que el administrador sepa que metió mal la opción
                            print("\nPon una opción válida por favor\n")
                    
                    
                    
                    

                # Condicion para internamente saber cuando los datos no coinciden
                else:
                    # Forma de saber cuantas veces verifico la condicion anterior antes de encontrar coincidencias
                    verificar_administrador += 1          
            
            # Condicional que advierte que el usuario o la contraseña no son correctas
            if verificar_administrador == len(administradores) + 1:
                
                # Aqui le quitamos intentos para el inicio de sesión al usuario
                contador2 += 1
                # Mensaje de error para el inicio de sesión
                print("\nContraseña y/o nombre administrador incorrectos, intenta nuevamente\n")
                
                # Condicion para cuando aún tenemos intentos
                if contador2 < 3:
                    # Mensaje para mostrar cuantos intentos quedan
                    print("Te quedan ", 3 - contador2, " intentos")
                    
                # Condicional para cuando ya no hay intentos
                elif contador2 == 3:
                    # Mensaje de que ya no quedan intentos para iniciar sesión como administrador
                    print("\nSe acabaron los intentos, vuelve a intentarlo más tarde\n")
    
    
    

    # Opcion para salir y finalizar el programa
    elif opciones_menu == "3":
        # Mensaje de despedida
        print("╔══════════════════════════════════╗")
        print("║          ¡Hasta luego!           ║")
        print("║    Esperamos verte de regreso    ║")
        print("╚══════════════════════════════════╝")
        # Esta funcion 
        condicion_general = False
        
    # Este else sirve para cachar si el usuario pone algo que no es valido
    else:
        # Mensaje que funciona para avisar el error
        print("\nOpción no válida, por favor escoge una opción correcta\n")



    